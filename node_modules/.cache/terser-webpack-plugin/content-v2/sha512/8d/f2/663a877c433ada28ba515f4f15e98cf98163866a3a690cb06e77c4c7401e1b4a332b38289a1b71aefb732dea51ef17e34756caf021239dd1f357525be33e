{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{346:function(a,e,t){\"use strict\";t.r(e);var s=t(28),v=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"运算符\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#运算符\"}},[a._v(\"#\")]),a._v(\" 运算符\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"运算符优先级\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#运算符优先级\"}},[a._v(\"#\")]),a._v(\" 运算符优先级\")]),a._v(\" \"),t(\"p\",[a._v(\"JavaScript 各种运算符的优先级别（Operator Precedence）是不一样的。优先级高的运算符先执行，优先级低的运算符后执行。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"4 + 5 * 6 // 34\\n\")])])]),t(\"p\",[a._v(\"上面的代码中，乘法运算符（\"),t(\"code\",[a._v(\"*\")]),a._v(\"）的优先性高于加法运算符（\"),t(\"code\",[a._v(\"+\")]),a._v(\"），所以先执行乘法，再执行加法，相当于下面这样。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"4 + (5 * 6) // 34\\n\")])])]),t(\"p\",[a._v(\"如果多个运算符混写在一起，常常会导致令人困惑的代码。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"var x = 1;\\nvar arr = [];\\n\\nvar y = arr.length <= 0 || arr[0] === undefined ? x : arr[0];\\n\")])])]),t(\"p\",[a._v(\"上面代码中，变量\"),t(\"code\",[a._v(\"y\")]),a._v(\"的值就很难看出来，因为这个表达式涉及5个运算符，到底谁的优先级最高，实在不容易记住。\")]),a._v(\" \"),t(\"p\",[a._v(\"根据语言规格，这五个运算符的优先级从高到低依次为：小于等于（\"),t(\"code\",[a._v(\"<=\")]),a._v(\")、严格相等（\"),t(\"code\",[a._v(\"===\")]),a._v(\"）、或（\"),t(\"code\",[a._v(\"||\")]),a._v(\"）、三元（\"),t(\"code\",[a._v(\"?:\")]),a._v(\"）、等号（\"),t(\"code\",[a._v(\"=\")]),a._v(\"）。因此上面的表达式，实际的运算顺序如下。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"var y = ((arr.length <= 0) || (arr[0] === undefined)) ? x : arr[0];\\n\")])])]),t(\"p\",[a._v(\"记住所有运算符的优先级，是非常难的，也是没有必要的。\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"圆括号的作用\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#圆括号的作用\"}},[a._v(\"#\")]),a._v(\" 圆括号的作用\")]),a._v(\" \"),t(\"p\",[a._v(\"圆括号（\"),t(\"code\",[a._v(\"()\")]),a._v(\"）可以用来提高运算的优先级，因为它的优先级是最高的，即圆括号中的表达式会第一个运算。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"(4 + 5) * 6 // 54\\n\")])])]),t(\"p\",[a._v(\"上面代码中，由于使用了圆括号，加法会先于乘法执行。\")]),a._v(\" \"),t(\"p\",[a._v(\"运算符的优先级别十分繁杂，且都是硬性规定，因此建议总是使用圆括号，保证运算顺序清晰可读，这对代码的维护和除错至关重要。\")]),a._v(\" \"),t(\"p\",[a._v(\"顺便说一下，圆括号不是运算符，而是一种语法结构。它一共有两种用法：一种是把表达式放在圆括号之中，提升运算的优先级；另一种是跟在函数的后面，作用是调用函数。\")]),a._v(\" \"),t(\"p\",[a._v(\"注意，因为圆括号不是运算符，所以不具有求值作用，只改变运算的优先级。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"var x = 1;\\n(x) = 2;\\n\")])])]),t(\"p\",[a._v(\"上面代码的第二行，如果圆括号具有求值作用，那么就会变成\"),t(\"code\",[a._v(\"1 = 2\")]),a._v(\"，这是会报错了。但是，上面的代码可以运行，这验证了圆括号只改变优先级，不会求值。\")]),a._v(\" \"),t(\"p\",[a._v(\"这也意味着，如果整个表达式都放在圆括号之中，那么不会有任何效果。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"(expression)\\n// 等同于\\nexpression\\n\")])])]),t(\"p\",[a._v(\"函数放在圆括号中，会返回函数本身。如果圆括号紧跟在函数的后面，就表示调用函数。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"function f() {\\n  return 1;\\n}\\n\\n(f) // function f(){return 1;}\\nf() // 1\\n\")])])]),t(\"p\",[a._v(\"上面代码中，函数放在圆括号之中会返回函数本身，圆括号跟在函数后面则是调用函数。\")]),a._v(\" \"),t(\"p\",[a._v(\"圆括号之中，只能放置表达式，如果将语句放在圆括号之中，就会报错。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"(var a = 1)\\n// SyntaxError: Unexpected token var\\n\")])])]),t(\"h3\",{attrs:{id:\"左结合与右结合\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#左结合与右结合\"}},[a._v(\"#\")]),a._v(\" 左结合与右结合\")]),a._v(\" \"),t(\"p\",[a._v(\"对于优先级别相同的运算符，大多数情况，计算顺序总是从左到右，这叫做运算符的“左结合”（left-to-right associativity），即从左边开始计算。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"x + y + z\\n\")])])]),t(\"p\",[a._v(\"上面代码先计算最左边的\"),t(\"code\",[a._v(\"x\")]),a._v(\"与\"),t(\"code\",[a._v(\"y\")]),a._v(\"的和，然后再计算与\"),t(\"code\",[a._v(\"z\")]),a._v(\"的和。\")]),a._v(\" \"),t(\"p\",[a._v(\"但是少数运算符的计算顺序是从右到左，即从右边开始计算，这叫做运算符的“右结合”（right-to-left associativity）。其中，最主要的是赋值运算符（\"),t(\"code\",[a._v(\"=\")]),a._v(\"）和三元条件运算符（\"),t(\"code\",[a._v(\"?:\")]),a._v(\"）。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"w = x = y = z;\\nq = a ? b : c ? d : e ? f : g;\\n\")])])]),t(\"p\",[a._v(\"上面代码的运算结果，相当于下面的样子。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"w = (x = (y = z));\\nq = a ? b : (c ? d : (e ? f : g));\\n\")])])]),t(\"p\",[a._v(\"上面的两行代码，各有三个等号运算符和三个三元运算符，都是先计算最右边的那个运算符。\")]),a._v(\" \"),t(\"p\",[a._v(\"指数运算符（\"),t(\"code\",[a._v(\"**\")]),a._v(\"）也是右结合的。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"// 相当于 2 ** (3 ** 2)\\n2 ** 3 ** 2\\n// 512\\n\")])])])])}),[],!1,null,null,null);e.default=v.exports}}]);","extractedComments":[]}