{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{353:function(a,t,s){\"use strict\";s.r(t);var e=s(28),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"基本语法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#基本语法\"}},[a._v(\"#\")]),a._v(\" 基本语法\")]),a._v(\" \"),s(\"h2\",{attrs:{id:\"_1-语句\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-语句\"}},[a._v(\"#\")]),a._v(\" 1.语句\")]),a._v(\" \"),s(\"p\",[a._v(\"JavaScript 程序的执行单位为行（line），也就是一行一行地执行。一般情况下，每一行就是一个语句。\")]),a._v(\" \"),s(\"p\",[a._v(\"语句（statement）是为了完成某种任务而进行的操作，比如下面就是一行赋值语句。\")]),a._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[a._v(\"var a = 1 + 3;\\n\")])])]),s(\"p\",[s(\"code\",[a._v(\"1 + 3\")]),a._v(\"叫做表达式（expression）\")]),a._v(\" \"),s(\"h2\",{attrs:{id:\"_2-变量\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-变量\"}},[a._v(\"#\")]),a._v(\" 2.变量\")]),a._v(\" \"),s(\"p\",[a._v(\"JavaScript 是一种动态类型语言，也就是说，变量的类型没有限制，变量可以随时更改类型。\")]),a._v(\" \"),s(\"h3\",{attrs:{id:\"_2-1变量提升\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1变量提升\"}},[a._v(\"#\")]),a._v(\" 2.1变量提升\")]),a._v(\" \"),s(\"p\",[a._v(\"JavaScript 引擎的工作方式是，先解析代码，获取所有被声明的变量，然后再一行一行地运行。这造成的结果，就是所有的变量的声明语句，都会被提升到代码的头部，这就叫做变量提升\")]),a._v(\" \"),s(\"h2\",{attrs:{id:\"_3-标识符\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-标识符\"}},[a._v(\"#\")]),a._v(\" 3.标识符\")]),a._v(\" \"),s(\"p\",[a._v(\"identifier\")]),a._v(\" \"),s(\"ul\",[s(\"li\",[a._v(\"第一个字符，可以是任意 Unicode 字母（包括英文字母和其他语言的字母），以及美元符号（\"),s(\"code\",[a._v(\"$\")]),a._v(\"）和下划线（\"),s(\"code\",[a._v(\"_\")]),a._v(\"）。\")]),a._v(\" \"),s(\"li\",[a._v(\"第二个字符及后面的字符，除了 Unicode 字母、美元符号和下划线，还可以用数字\"),s(\"code\",[a._v(\"0-9\")]),a._v(\"。\")])]),a._v(\" \"),s(\"p\",[a._v(\"下面这些都是合法的标识符。\")]),a._v(\" \"),s(\"div\",{staticClass:\"language-js extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[a._v(\"arg0\\n_tmp\\n$elem\\nπ\\n\")])])]),s(\"p\",[a._v(\"下面这些则是不合法的标识符。\")]),a._v(\" \"),s(\"div\",{staticClass:\"language-js extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"1\")]),a._v(\"a  \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 第一个字符不能是数字\")]),a._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"23\")]),a._v(\"  \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 同上\")]),a._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"**\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"*\")]),a._v(\"  \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 标识符不能包含星号\")]),a._v(\"\\na\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"+\")]),a._v(\"b  \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 标识符不能包含加号\")]),a._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"-\")]),a._v(\"d  \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 标识符不能包含减号或连词线\")]),a._v(\"\\n\")])])]),s(\"p\",[a._v(\"中文是合法的标识符，可以用作变量名。\")]),a._v(\" \"),s(\"div\",{staticClass:\"language-js extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"var\")]),a._v(\" 临时变量 \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\")])])]),s(\"blockquote\",[s(\"p\",[a._v(\"JavaScript 有一些保留字，不能用作标识符：arguments、break、case、catch、class、const、continue、debugger、default、delete、do、else、enum、eval、export、extends、false、finally、for、function、if、implements、import、in、instanceof、interface、let、new、null、package、private、protected、public、return、static、super、switch、this、throw、true、try、typeof、var、void、while、with、yield。\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"_4-区块\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-区块\"}},[a._v(\"#\")]),a._v(\" 4.区块\")]),a._v(\" \"),s(\"p\",[a._v(\"JavaScript 使用大括号，将多个相关的语句组合在一起，称为“区块”（block）。\")]),a._v(\" \"),s(\"p\",[a._v(\"对于\"),s(\"code\",[a._v(\"var\")]),a._v(\"命令来说，JavaScript 的区块不构成单独的作用域（scope）。\")]),a._v(\" \"),s(\"div\",{staticClass:\"language-js extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"var\")]),a._v(\" a \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\\na \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 1\")]),a._v(\"\\n\")])])]),s(\"p\",[a._v(\"上面代码在区块内部，使用\"),s(\"code\",[a._v(\"var\")]),a._v(\"命令声明并赋值了变量\"),s(\"code\",[a._v(\"a\")]),a._v(\"，然后在区块外部，变量\"),s(\"code\",[a._v(\"a\")]),a._v(\"依然有效，区块对于\"),s(\"code\",[a._v(\"var\")]),a._v(\"命令不构成单独的作用域，与不使用区块的情况没有任何区别。在 JavaScript 语言中，单独使用区块并不常见，区块往往用来构成其他更复杂的语法结构，比如\"),s(\"code\",[a._v(\"for\")]),a._v(\"、\"),s(\"code\",[a._v(\"if\")]),a._v(\"、\"),s(\"code\",[a._v(\"while\")]),a._v(\"、\"),s(\"code\",[a._v(\"function\")]),a._v(\"等。\")])])}),[],!1,null,null,null);t.default=r.exports}}]);","extractedComments":[]}