{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{346:function(a,t,e){\"use strict\";e.r(t);var s=e(28),n=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[e(\"h1\",{attrs:{id:\"数据类型\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据类型\"}},[a._v(\"#\")]),a._v(\" 数据类型\")]),a._v(\" \"),e(\"h2\",{attrs:{id:\"简介\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#简介\"}},[a._v(\"#\")]),a._v(\" 简介\")]),a._v(\" \"),e(\"p\",[a._v(\"JavaScript 语言的每一个值，都属于某一种数据类型。JavaScript 的数据类型，共有六种。（ES6 又新增了第七种 Symbol 类型的值，本教程不涉及。）\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"数值（number）：整数和小数（比如\"),e(\"code\",[a._v(\"1\")]),a._v(\"和\"),e(\"code\",[a._v(\"3.14\")]),a._v(\"）\")]),a._v(\" \"),e(\"li\",[a._v(\"字符串（string）：文本（比如\"),e(\"code\",[a._v(\"Hello World\")]),a._v(\"）。\")]),a._v(\" \"),e(\"li\",[a._v(\"布尔值（boolean）：表示真伪的两个特殊值，即\"),e(\"code\",[a._v(\"true\")]),a._v(\"（真）和\"),e(\"code\",[a._v(\"false\")]),a._v(\"（假）\")]),a._v(\" \"),e(\"li\",[e(\"code\",[a._v(\"undefined\")]),a._v(\"：表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值\")]),a._v(\" \"),e(\"li\",[e(\"code\",[a._v(\"null\")]),a._v(\"：表示空值，即此处的值为空。\")]),a._v(\" \"),e(\"li\",[a._v(\"对象（object）：各种值组成的集合。\")])]),a._v(\" \"),e(\"p\",[a._v(\"通常，数值、字符串、布尔值这三种类型，合称为原始类型（primitive type）的值，即它们是最基本的数据类型，不能再细分了。对象则称为合成类型（complex type）的值，因为一个对象往往是多个原始类型的值的合成，可以看作是一个存放各种值的容器。至于\"),e(\"code\",[a._v(\"undefined\")]),a._v(\"和\"),e(\"code\",[a._v(\"null\")]),a._v(\"，一般将它们看成两个特殊值。\")]),a._v(\" \"),e(\"p\",[a._v(\"对象是最复杂的数据类型，又可以分成三个子类型。\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"狭义的对象（object）\")]),a._v(\" \"),e(\"li\",[a._v(\"数组（array）\")]),a._v(\" \"),e(\"li\",[a._v(\"函数（function）\")])]),a._v(\" \"),e(\"p\",[a._v(\"狭义的对象和数组是两种不同的数据组合方式，除非特别声明，本教程的“对象”都特指狭义的对象。函数其实是处理数据的方法，JavaScript 把它当成一种数据类型，可以赋值给变量，这为编程带来了很大的灵活性，也为 JavaScript 的“函数式编程”奠定了基础。\")]),a._v(\" \"),e(\"h2\",{attrs:{id:\"typeof-运算符\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#typeof-运算符\"}},[a._v(\"#\")]),a._v(\" typeof 运算符\")]),a._v(\" \"),e(\"p\",[a._v(\"JavaScript 有三种方法，可以确定一个值到底是什么类型。\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[e(\"code\",[a._v(\"typeof\")]),a._v(\"运算符\")]),a._v(\" \"),e(\"li\",[e(\"code\",[a._v(\"instanceof\")]),a._v(\"运算符\")]),a._v(\" \"),e(\"li\",[e(\"code\",[a._v(\"Object.prototype.toString\")]),a._v(\"方法\")])]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"instanceof\")]),a._v(\"运算符和\"),e(\"code\",[a._v(\"Object.prototype.toString\")]),a._v(\"方法，将在后文介绍。这里介绍\"),e(\"code\",[a._v(\"typeof\")]),a._v(\"运算符。\")]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"typeof\")]),a._v(\"运算符可以返回一个值的数据类型。\")]),a._v(\" \"),e(\"p\",[a._v(\"数值、字符串、布尔值分别返回\"),e(\"code\",[a._v(\"number\")]),a._v(\"、\"),e(\"code\",[a._v(\"string\")]),a._v(\"、\"),e(\"code\",[a._v(\"boolean\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v('typeof 123 // \"number\"\\ntypeof \\'123\\' // \"string\"\\ntypeof false // \"boolean\"\\n')])])]),e(\"p\",[a._v(\"函数返回\"),e(\"code\",[a._v(\"function\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v('function f() {}\\ntypeof f\\n// \"function\"\\n')])])]),e(\"p\",[e(\"code\",[a._v(\"undefined\")]),a._v(\"返回\"),e(\"code\",[a._v(\"undefined\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v('typeof undefined\\n// \"undefined\"\\n')])])]),e(\"p\",[a._v(\"利用这一点，\"),e(\"code\",[a._v(\"typeof\")]),a._v(\"可以用来检查一个没有声明的变量，而不报错。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v('v\\n// ReferenceError: v is not defined\\n\\ntypeof v\\n// \"undefined\"\\n')])])]),e(\"p\",[a._v(\"上面代码中，变量\"),e(\"code\",[a._v(\"v\")]),a._v(\"没有用\"),e(\"code\",[a._v(\"var\")]),a._v(\"命令声明，直接使用就会报错。但是，放在\"),e(\"code\",[a._v(\"typeof\")]),a._v(\"后面，就不报错了，而是返回\"),e(\"code\",[a._v(\"undefined\")]),a._v(\"。\")]),a._v(\" \"),e(\"p\",[a._v(\"实际编程中，这个特点通常用在判断语句。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v('// 错误的写法\\nif (v) {\\n  // ...\\n}\\n// ReferenceError: v is not defined\\n\\n// 正确的写法\\nif (typeof v === \"undefined\") {\\n  // ...\\n}\\n')])])]),e(\"p\",[a._v(\"对象返回\"),e(\"code\",[a._v(\"object\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v('typeof window // \"object\"\\ntypeof {} // \"object\"\\ntypeof [] // \"object\"\\n')])])]),e(\"p\",[a._v(\"上面代码中，空数组（\"),e(\"code\",[a._v(\"[]\")]),a._v(\"）的类型也是\"),e(\"code\",[a._v(\"object\")]),a._v(\"，这表示在 JavaScript 内部，数组本质上只是一种特殊的对象。这里顺便提一下，\"),e(\"code\",[a._v(\"instanceof\")]),a._v(\"运算符可以区分数组和对象。\"),e(\"code\",[a._v(\"instanceof\")]),a._v(\"运算符的详细解释，请见《面向对象编程》一章。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"var o = {};\\nvar a = [];\\n\\no instanceof Array // false\\na instanceof Array // true\\n\")])])]),e(\"p\",[e(\"code\",[a._v(\"null\")]),a._v(\"返回\"),e(\"code\",[a._v(\"object\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v('typeof null // \"object\"\\n')])])]),e(\"p\",[e(\"code\",[a._v(\"null\")]),a._v(\"的类型是\"),e(\"code\",[a._v(\"object\")]),a._v(\"，这是由于历史原因造成的。1995年的 JavaScript 语言第一版，只设计了五种数据类型（对象、整数、浮点数、字符串和布尔值），没考虑\"),e(\"code\",[a._v(\"null\")]),a._v(\"，只把它当作\"),e(\"code\",[a._v(\"object\")]),a._v(\"的一种特殊值。后来\"),e(\"code\",[a._v(\"null\")]),a._v(\"独立出来，作为一种单独的数据类型，为了兼容以前的代码，\"),e(\"code\",[a._v(\"typeof null\")]),a._v(\"返回\"),e(\"code\",[a._v(\"object\")]),a._v(\"就没法改变了。\")]),a._v(\" \"),e(\"h2\",{attrs:{id:\"null-和-undefined\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#null-和-undefined\"}},[a._v(\"#\")]),a._v(\" null 和 undefined\")]),a._v(\" \"),e(\"p\",[a._v(\"Brendan Eich 觉得表示“无”的值最好不是对象。其次，那时的 JavaScript 不包括错误处理机制，Brendan Eich 觉得，如果\"),e(\"code\",[a._v(\"null\")]),a._v(\"自动转为0，很不容易发现错误。\")]),a._v(\" \"),e(\"p\",[a._v(\"因此，他又设计了一个\"),e(\"code\",[a._v(\"undefined\")]),a._v(\"。区别是这样的：\"),e(\"code\",[a._v(\"null\")]),a._v(\"是一个表示“空”的对象，转为数值时为\"),e(\"code\",[a._v(\"0\")]),a._v(\"；\"),e(\"code\",[a._v(\"undefined\")]),a._v('是一个表示\"此处无定义\"的原始值，转为数值时为'),e(\"code\",[a._v(\"NaN\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"Number(undefined) // NaN\\n5 + undefined // NaN\\n\")])])]),e(\"h3\",{attrs:{id:\"用法和含义\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#用法和含义\"}},[a._v(\"#\")]),a._v(\" 用法和含义 \"),e(\"a\",{attrs:{href:\"https://wangdoc.com/javascript/types/null-undefined-boolean.html#%E7%94%A8%E6%B3%95%E5%92%8C%E5%90%AB%E4%B9%89\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"#\"),e(\"OutboundLink\")],1)]),a._v(\" \"),e(\"p\",[a._v(\"对于\"),e(\"code\",[a._v(\"null\")]),a._v(\"和\"),e(\"code\",[a._v(\"undefined\")]),a._v(\"，大致可以像下面这样理解。\")]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"null\")]),a._v(\"表示空值，即该处的值现在为空。调用函数时，某个参数未设置任何值，这时就可以传入\"),e(\"code\",[a._v(\"null\")]),a._v(\"，表示该参数为空。比如，某个函数接受引擎抛出的错误作为参数，如果运行过程中未出错，那么这个参数就会传入\"),e(\"code\",[a._v(\"null\")]),a._v(\"，表示未发生错误。\")]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"undefined\")]),a._v(\"表示“未定义”，下面是返回\"),e(\"code\",[a._v(\"undefined\")]),a._v(\"的典型场景。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language-js extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 变量声明了，但没有赋值\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"var\")]),a._v(\" i\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\ni \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// undefined\")]),a._v(\"\\n\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 调用函数时，应该提供的参数没有提供，该参数等于 undefined\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"function\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"f\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token parameter\"}},[a._v(\"x\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n  \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"return\")]),a._v(\" x\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"f\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// undefined\")]),a._v(\"\\n\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 对象没有赋值的属性\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"var\")]),a._v(\"  o \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"new\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[a._v(\"Object\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\no\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"p \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// undefined\")]),a._v(\"\\n\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 函数没有返回值时，默认返回 undefined\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"function\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"f\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"f\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// undefined\")]),a._v(\"\\n\")])])]),e(\"h2\",{attrs:{id:\"布尔值\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#布尔值\"}},[a._v(\"#\")]),a._v(\" 布尔值\")]),a._v(\" \"),e(\"p\",[a._v(\"下列运算符会返回布尔值：\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"前置逻辑运算符： \"),e(\"code\",[a._v(\"!\")]),a._v(\" (Not)\")]),a._v(\" \"),e(\"li\",[a._v(\"相等运算符：\"),e(\"code\",[a._v(\"===\")]),a._v(\"，\"),e(\"code\",[a._v(\"!==\")]),a._v(\"，\"),e(\"code\",[a._v(\"==\")]),a._v(\"，\"),e(\"code\",[a._v(\"!=\")])]),a._v(\" \"),e(\"li\",[a._v(\"比较运算符：\"),e(\"code\",[a._v(\">\")]),a._v(\"，\"),e(\"code\",[a._v(\">=\")]),a._v(\"，\"),e(\"code\",[a._v(\"<\")]),a._v(\"，\"),e(\"code\",[a._v(\"<=\")])])]),a._v(\" \"),e(\"p\",[a._v(\"如果 JavaScript 预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值。转换规则是除了下面六个值被转为\"),e(\"code\",[a._v(\"false\")]),a._v(\"，其他值都视为\"),e(\"code\",[a._v(\"true\")]),a._v(\"。\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[e(\"code\",[a._v(\"undefined\")])]),a._v(\" \"),e(\"li\",[e(\"code\",[a._v(\"null\")])]),a._v(\" \"),e(\"li\",[e(\"code\",[a._v(\"false\")])]),a._v(\" \"),e(\"li\",[e(\"code\",[a._v(\"0\")])]),a._v(\" \"),e(\"li\",[e(\"code\",[a._v(\"NaN\")])]),a._v(\" \"),e(\"li\",[e(\"code\",[a._v('\"\"')]),a._v(\"或\"),e(\"code\",[a._v(\"''\")]),a._v(\"（空字符串）\")])]),a._v(\" \"),e(\"p\",[a._v(\"注意，空数组（\"),e(\"code\",[a._v(\"[]\")]),a._v(\"）和空对象（\"),e(\"code\",[a._v(\"{}\")]),a._v(\"）对应的布尔值，都是\"),e(\"code\",[a._v(\"true\")]),a._v(\"。\")]),a._v(\" \"),e(\"h2\",{attrs:{id:\"数值\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数值\"}},[a._v(\"#\")]),a._v(\" 数值\")]),a._v(\" \"),e(\"h3\",{attrs:{id:\"整数和浮点数\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#整数和浮点数\"}},[a._v(\"#\")]),a._v(\" 整数和浮点数\")]),a._v(\" \"),e(\"div\",{staticClass:\"language-js extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"1\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"===\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"1.0\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// true\")]),a._v(\"\\n\")])])]),e(\"p\",[a._v(\"这就是说，JavaScript 语言的底层根本没有整数，所有数字都是小数（64位浮点数）。容易造成混淆的是，某些运算只有整数才能完成，此时 JavaScript 会自动把64位浮点数，转成32位整数。\")]),a._v(\" \"),e(\"p\",[a._v(\"由于浮点数不是精确的值，所以涉及小数的比较和运算要特别小心。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language-js extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"0.1\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"+\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"0.2\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"===\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"0.3\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// false\")]),a._v(\"\\n\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"0.3\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"/\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"0.1\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 2.9999999999999996\")]),a._v(\"\\n\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"0.3\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"-\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"0.2\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"===\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"0.2\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"-\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"0.1\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// false\")]),a._v(\"\\n\")])])]),e(\"h3\",{attrs:{id:\"数值精度\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数值精度\"}},[a._v(\"#\")]),a._v(\" 数值精度\")]),a._v(\" \"),e(\"p\",[a._v(\"根据国际标准 IEEE 754，JavaScript 浮点数的64个二进制位，从最左边开始，是这样组成的。\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[a._v(\"第1位：符号位，\"),e(\"code\",[a._v(\"0\")]),a._v(\"表示正数，\"),e(\"code\",[a._v(\"1\")]),a._v(\"表示负数\")])]),a._v(\" \"),e(\"li\",[e(\"p\",[a._v(\"第2位到第12位（共11位）：指数部分\")])]),a._v(\" \"),e(\"li\",[e(\"p\",[a._v(\"第13位到第64位（共52位）：小数部分（即有效数字）\")]),a._v(\" \"),e(\"p\",[a._v(\"精度最多只能到53个二进制位，这意味着，绝对值小于2的53次方的整数，即-253到253，都可以精确表示。\")])])]),a._v(\" \"),e(\"div\",{staticClass:\"language-js extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[a._v(\"Math\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"pow\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"2\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"53\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 9007199254740992\")]),a._v(\"\\n\\nMath\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"pow\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"2\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"53\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"+\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"1\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 9007199254740992\")]),a._v(\"\\n\\nMath\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"pow\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"2\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"53\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"+\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"2\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 9007199254740994\")]),a._v(\"\\n\\nMath\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"pow\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"2\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"53\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"+\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"3\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 9007199254740996\")]),a._v(\"\\n\\nMath\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"pow\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"2\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"53\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"+\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"4\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 9007199254740996\")]),a._v(\"\\n\")])])]),e(\"div\",{staticClass:\"language-js extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"var\")]),a._v(\" x \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"0.5\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"for\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"var\")]),a._v(\" i \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"0\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\" i \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"<\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"25\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\" i\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"++\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n  x \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" x \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"*\")]),a._v(\" x\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\\nx \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 0\")]),a._v(\"\\n\")])])]),e(\"p\",[a._v(\"JavaScript 提供\"),e(\"code\",[a._v(\"Number\")]),a._v(\"对象的\"),e(\"code\",[a._v(\"MAX_VALUE\")]),a._v(\"和\"),e(\"code\",[a._v(\"MIN_VALUE\")]),a._v(\"属性，返回可以表示的具体的最大值和最小值。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"Number.MAX_VALUE // 1.7976931348623157e+308\\nNumber.MIN_VALUE // 5e-324\\n\")])])]),e(\"h3\",{attrs:{id:\"数值表示法\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数值表示法\"}},[a._v(\"#\")]),a._v(\" 数值表示法\")]),a._v(\" \"),e(\"p\",[a._v(\"JavaScript 的数值有多种表示方法，可以用字面形式直接表示，比如\"),e(\"code\",[a._v(\"35\")]),a._v(\"（十进制）和\"),e(\"code\",[a._v(\"0xFF\")]),a._v(\"（十六进制）。\")]),a._v(\" \"),e(\"p\",[a._v(\"数值也可以采用科学计数法表示，下面是几个科学计数法的例子。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"123e3 // 123000\\n123e-3 // 0.123\\n-3.1E+12\\n.1e-23\\n\")])])]),e(\"p\",[a._v(\"科学计数法允许字母\"),e(\"code\",[a._v(\"e\")]),a._v(\"或\"),e(\"code\",[a._v(\"E\")]),a._v(\"的后面，跟着一个整数，表示这个数值的指数部分。\")]),a._v(\" \"),e(\"p\",[a._v(\"以下两种情况，JavaScript 会自动将数值转为科学计数法表示，其他情况都采用字面形式直接表示。\")]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"（1）小数点前的数字多于21位。\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"1234567890123456789012\\n// 1.2345678901234568e+21\\n\\n123456789012345678901\\n// 123456789012345680000\\n\")])])]),e(\"p\",[e(\"strong\",[a._v(\"（2）小数点后的零多于5个。\")])]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"// 小数点后紧跟5个以上的零，\\n// 就自动转为科学计数法\\n0.0000003 // 3e-7\\n\\n// 否则，就保持原来的字面形式\\n0.000003 // 0.000003\\n\")])])]),e(\"h3\",{attrs:{id:\"数值进制\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数值进制\"}},[a._v(\"#\")]),a._v(\" 数值进制\")]),a._v(\" \"),e(\"p\",[a._v(\"使用字面量（literal）直接表示一个数值时，JavaScript 对整数提供四种进制的表示方法：十进制、十六进制、八进制、二进制。\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"十进制：没有前导0的数值。\")]),a._v(\" \"),e(\"li\",[a._v(\"八进制：有前缀\"),e(\"code\",[a._v(\"0o\")]),a._v(\"或\"),e(\"code\",[a._v(\"0O\")]),a._v(\"的数值，或者有前导0、且只用到0-7的八个阿拉伯数字的数值。\")]),a._v(\" \"),e(\"li\",[a._v(\"十六进制：有前缀\"),e(\"code\",[a._v(\"0x\")]),a._v(\"或\"),e(\"code\",[a._v(\"0X\")]),a._v(\"的数值。\")]),a._v(\" \"),e(\"li\",[a._v(\"二进制：有前缀\"),e(\"code\",[a._v(\"0b\")]),a._v(\"或\"),e(\"code\",[a._v(\"0B\")]),a._v(\"的数值。\")])]),a._v(\" \"),e(\"p\",[a._v(\"默认情况下，JavaScript 内部会自动将八进制、十六进制、二进制转为十进制。下面是一些例子。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"0xff // 255\\n0o377 // 255\\n0b11 // 3\\n\")])])]),e(\"p\",[a._v(\"如果八进制、十六进制、二进制的数值里面，出现不属于该进制的数字，就会报错。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"0xzz // 报错\\n0o88 // 报错\\n0b22 // 报错\\n\")])])]),e(\"p\",[a._v(\"上面代码中，十六进制出现了字母\"),e(\"code\",[a._v(\"z\")]),a._v(\"、八进制出现数字\"),e(\"code\",[a._v(\"8\")]),a._v(\"、二进制出现数字\"),e(\"code\",[a._v(\"2\")]),a._v(\"，因此报错。\")]),a._v(\" \"),e(\"p\",[a._v(\"通常来说，有前导0的数值会被视为八进制，但是如果前导0后面有数字\"),e(\"code\",[a._v(\"8\")]),a._v(\"和\"),e(\"code\",[a._v(\"9\")]),a._v(\"，则该数值被视为十进制。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"0888 // 888\\n0777 // 511\\n\")])])]),e(\"p\",[a._v(\"前导0表示八进制，处理时很容易造成混乱。ES5 的严格模式和 ES6，已经废除了这种表示法，但是浏览器为了兼容以前的代码，目前还继续支持这种表示法。\")]),a._v(\" \"),e(\"h3\",{attrs:{id:\"特殊数值\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#特殊数值\"}},[a._v(\"#\")]),a._v(\" 特殊数值\")]),a._v(\" \"),e(\"h4\",{attrs:{id:\"正零和负零\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#正零和负零\"}},[a._v(\"#\")]),a._v(\" 正零和负零\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"-0 === +0 // true\\n0 === -0 // true\\n0 === +0 // true\\n\")])])]),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"+0 // 0\\n-0 // 0\\n(-0).toString() // '0'\\n(+0).toString() // '0'\\n\")])])]),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"(1 / +0) === (1 / -0) // false\\n\")])])]),e(\"p\",[a._v(\"除以正零得到\"),e(\"code\",[a._v(\"+Infinity\")]),a._v(\"，除以负零得到\"),e(\"code\",[a._v(\"-Infinity\")])]),a._v(\" \"),e(\"h4\",{attrs:{id:\"nan\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#nan\"}},[a._v(\"#\")]),a._v(\" NaN\")]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"（1）含义\")])]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"NaN\")]),a._v(\"是 JavaScript 的特殊值，表示“非数字”（Not a Number），主要出现在将字符串解析成数字出错的场合。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"5 - 'x' // NaN\\n\")])])]),e(\"p\",[a._v(\"上面代码运行时，会自动将字符串\"),e(\"code\",[a._v(\"x\")]),a._v(\"转为数值，但是由于\"),e(\"code\",[a._v(\"x\")]),a._v(\"不是数值，所以最后得到结果为\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"，表示它是“非数字”（\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"）。\")]),a._v(\" \"),e(\"p\",[a._v(\"另外，一些数学函数的运算结果会出现\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"Math.acos(2) // NaN\\nMath.log(-1) // NaN\\nMath.sqrt(-1) // NaN\\n\")])])]),e(\"p\",[e(\"code\",[a._v(\"0\")]),a._v(\"除以\"),e(\"code\",[a._v(\"0\")]),a._v(\"也会得到\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"0 / 0 // NaN\\n\")])])]),e(\"p\",[a._v(\"需要注意的是，\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"不是独立的数据类型，而是一个特殊数值，它的数据类型依然属于\"),e(\"code\",[a._v(\"Number\")]),a._v(\"，使用\"),e(\"code\",[a._v(\"typeof\")]),a._v(\"运算符可以看得很清楚。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"typeof NaN // 'number'\\n\")])])]),e(\"p\",[e(\"strong\",[a._v(\"（2）运算规则\")])]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"NaN\")]),a._v(\"不等于任何值，包括它本身。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"NaN === NaN // false\\n\")])])]),e(\"p\",[a._v(\"数组的\"),e(\"code\",[a._v(\"indexOf\")]),a._v(\"方法内部使用的是严格相等运算符，所以该方法对\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"不成立。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"[NaN].indexOf(NaN) // -1\\n\")])])]),e(\"p\",[e(\"code\",[a._v(\"NaN\")]),a._v(\"在布尔运算时被当作\"),e(\"code\",[a._v(\"false\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"Boolean(NaN) // false\\n\")])])]),e(\"p\",[e(\"code\",[a._v(\"NaN\")]),a._v(\"与任何数（包括它自己）的运算，得到的都是\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"NaN + 32 // NaN\\nNaN - 32 // NaN\\nNaN * 32 // NaN\\nNaN / 32 // NaN\\n\")])])]),e(\"h4\",{attrs:{id:\"infinity\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#infinity\"}},[a._v(\"#\")]),a._v(\" Infinity\")]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"（1）含义\")])]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"Infinity\")]),a._v(\"表示“无穷”，用来表示两种场景。一种是一个正的数值太大，或一个负的数值太小，无法表示；另一种是非0数值除以0，得到\"),e(\"code\",[a._v(\"Infinity\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"// 场景一\\nMath.pow(2, 1024)\\n// Infinity\\n\\n// 场景二\\n0 / 0 // NaN\\n1 / 0 // Infinity\\n\")])])]),e(\"p\",[a._v(\"上面代码中，第一个场景是一个表达式的计算结果太大，超出了能够表示的范围，因此返回\"),e(\"code\",[a._v(\"Infinity\")]),a._v(\"。第二个场景是\"),e(\"code\",[a._v(\"0\")]),a._v(\"除以\"),e(\"code\",[a._v(\"0\")]),a._v(\"会得到\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"，而非0数值除以\"),e(\"code\",[a._v(\"0\")]),a._v(\"，会返回\"),e(\"code\",[a._v(\"Infinity\")]),a._v(\"。\")]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"Infinity\")]),a._v(\"有正负之分，\"),e(\"code\",[a._v(\"Infinity\")]),a._v(\"表示正的无穷，\"),e(\"code\",[a._v(\"-Infinity\")]),a._v(\"表示负的无穷。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"Infinity === -Infinity // false\\n\\n1 / -0 // -Infinity\\n-1 / -0 // Infinity\\n\")])])]),e(\"p\",[a._v(\"上面代码中，非零正数除以\"),e(\"code\",[a._v(\"-0\")]),a._v(\"，会得到\"),e(\"code\",[a._v(\"-Infinity\")]),a._v(\"，负数除以\"),e(\"code\",[a._v(\"-0\")]),a._v(\"，会得到\"),e(\"code\",[a._v(\"Infinity\")]),a._v(\"。\")]),a._v(\" \"),e(\"p\",[a._v(\"由于数值正向溢出（overflow）、负向溢出（underflow）和被\"),e(\"code\",[a._v(\"0\")]),a._v(\"除，JavaScript 都不报错，所以单纯的数学运算几乎没有可能抛出错误。\")]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"Infinity\")]),a._v(\"大于一切数值（除了\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"），\"),e(\"code\",[a._v(\"-Infinity\")]),a._v(\"小于一切数值（除了\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"）。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"Infinity > 1000 // true\\n-Infinity < -1000 // true\\n\")])])]),e(\"p\",[e(\"code\",[a._v(\"Infinity\")]),a._v(\"与\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"比较，总是返回\"),e(\"code\",[a._v(\"false\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"Infinity > NaN // false\\n-Infinity > NaN // false\\n\\nInfinity < NaN // false\\n-Infinity < NaN // false\\n\")])])]),e(\"p\",[e(\"strong\",[a._v(\"（2）运算规则\")])]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"Infinity\")]),a._v(\"的四则运算，符合无穷的数学计算规则。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"5 * Infinity // Infinity\\n5 - Infinity // -Infinity\\nInfinity / 5 // Infinity\\n5 / Infinity // 0\\n\")])])]),e(\"p\",[a._v(\"0乘以\"),e(\"code\",[a._v(\"Infinity\")]),a._v(\"，返回\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"；0除以\"),e(\"code\",[a._v(\"Infinity\")]),a._v(\"，返回\"),e(\"code\",[a._v(\"0\")]),a._v(\"；\"),e(\"code\",[a._v(\"Infinity\")]),a._v(\"除以0，返回\"),e(\"code\",[a._v(\"Infinity\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"0 * Infinity // NaN\\n0 / Infinity // 0\\nInfinity / 0 // Infinity\\n\")])])]),e(\"p\",[e(\"code\",[a._v(\"Infinity\")]),a._v(\"加上或乘以\"),e(\"code\",[a._v(\"Infinity\")]),a._v(\"，返回的还是\"),e(\"code\",[a._v(\"Infinity\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"Infinity + Infinity // Infinity\\nInfinity * Infinity // Infinity\\n\")])])]),e(\"p\",[e(\"code\",[a._v(\"Infinity\")]),a._v(\"减去或除以\"),e(\"code\",[a._v(\"Infinity\")]),a._v(\"，得到\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"Infinity - Infinity // NaN\\nInfinity / Infinity // NaN\\n\")])])]),e(\"p\",[e(\"code\",[a._v(\"Infinity\")]),a._v(\"与\"),e(\"code\",[a._v(\"null\")]),a._v(\"计算时，\"),e(\"code\",[a._v(\"null\")]),a._v(\"会转成0，等同于与\"),e(\"code\",[a._v(\"0\")]),a._v(\"的计算。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"null * Infinity // NaN\\nnull / Infinity // 0\\nInfinity / null // Infinity\\n\")])])]),e(\"p\",[e(\"code\",[a._v(\"Infinity\")]),a._v(\"与\"),e(\"code\",[a._v(\"undefined\")]),a._v(\"计算，返回的都是\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"undefined + Infinity // NaN\\nundefined - Infinity // NaN\\nundefined * Infinity // NaN\\nundefined / Infinity // NaN\\nInfinity / undefined // NaN\\n\")])])]),e(\"h3\",{attrs:{id:\"parseint\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#parseint\"}},[a._v(\"#\")]),a._v(\" parseInt()\")]),a._v(\" \"),e(\"p\",[e(\"strong\",[a._v(\"（1）基本用法\")])]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"parseInt\")]),a._v(\"方法用于将字符串转为整数。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"parseInt('123') // 123\\n\")])])]),e(\"p\",[a._v(\"如果字符串头部有空格，空格会被自动去除。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"parseInt('   81') // 81\\n\")])])]),e(\"p\",[a._v(\"如果\"),e(\"code\",[a._v(\"parseInt\")]),a._v(\"的参数不是字符串，则会先转为字符串再转换。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"parseInt(1.23) // 1\\n// 等同于\\nparseInt('1.23') // 1\\n\")])])]),e(\"p\",[a._v(\"字符串转为整数的时候，是一个个字符依次转换，如果遇到不能转为数字的字符，就不再进行下去，返回已经转好的部分。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"parseInt('8a') // 8\\nparseInt('12**') // 12\\nparseInt('12.34') // 12\\nparseInt('15e2') // 15\\nparseInt('15px') // 15\\n\")])])]),e(\"p\",[a._v(\"上面代码中，\"),e(\"code\",[a._v(\"parseInt\")]),a._v(\"的参数都是字符串，结果只返回字符串头部可以转为数字的部分。\")]),a._v(\" \"),e(\"p\",[a._v(\"如果字符串的第一个字符不能转化为数字（后面跟着数字的正负号除外），返回\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"parseInt('abc') // NaN\\nparseInt('.3') // NaN\\nparseInt('') // NaN\\nparseInt('+') // NaN\\nparseInt('+1') // 1\\n\")])])]),e(\"p\",[a._v(\"所以，\"),e(\"code\",[a._v(\"parseInt\")]),a._v(\"的返回值只有两种可能，要么是一个十进制整数，要么是\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"。\")]),a._v(\" \"),e(\"p\",[a._v(\"如果字符串以\"),e(\"code\",[a._v(\"0x\")]),a._v(\"或\"),e(\"code\",[a._v(\"0X\")]),a._v(\"开头，\"),e(\"code\",[a._v(\"parseInt\")]),a._v(\"会将其按照十六进制数解析。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"parseInt('0x10') // 16\\n\")])])]),e(\"p\",[a._v(\"如果字符串以\"),e(\"code\",[a._v(\"0\")]),a._v(\"开头，将其按照10进制解析。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"parseInt('011') // 11\\n\")])])]),e(\"p\",[a._v(\"对于那些会自动转为科学计数法的数字，\"),e(\"code\",[a._v(\"parseInt\")]),a._v(\"会将科学计数法的表示方法视为字符串，因此导致一些奇怪的结果。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"parseInt(1000000000000000000000.5) // 1\\n// 等同于\\nparseInt('1e+21') // 1\\n\\nparseInt(0.0000008) // 8\\n// 等同于\\nparseInt('8e-7') // 8\\n\")])])]),e(\"p\",[e(\"strong\",[a._v(\"（2）进制转换\")])]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"parseInt\")]),a._v(\"方法还可以接受第二个参数（2到36之间），表示被解析的值的进制，返回该值对应的十进制数。默认情况下，\"),e(\"code\",[a._v(\"parseInt\")]),a._v(\"的第二个参数为10，即默认是十进制转十进制。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"parseInt('1000') // 1000\\n// 等同于\\nparseInt('1000', 10) // 1000\\n\")])])]),e(\"p\",[a._v(\"下面是转换指定进制的数的例子。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"parseInt('1000', 2) // 8\\nparseInt('1000', 6) // 216\\nparseInt('1000', 8) // 512\\n\")])])]),e(\"p\",[a._v(\"上面代码中，二进制、六进制、八进制的\"),e(\"code\",[a._v(\"1000\")]),a._v(\"，分别等于十进制的8、216和512。这意味着，可以用\"),e(\"code\",[a._v(\"parseInt\")]),a._v(\"方法进行进制的转换。\")]),a._v(\" \"),e(\"p\",[a._v(\"如果第二个参数不是数值，会被自动转为一个整数。这个整数只有在2到36之间，才能得到有意义的结果，超出这个范围，则返回\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"。如果第二个参数是\"),e(\"code\",[a._v(\"0\")]),a._v(\"、\"),e(\"code\",[a._v(\"undefined\")]),a._v(\"和\"),e(\"code\",[a._v(\"null\")]),a._v(\"，则直接忽略。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"parseInt('10', 37) // NaN\\nparseInt('10', 1) // NaN\\nparseInt('10', 0) // 10\\nparseInt('10', null) // 10\\nparseInt('10', undefined) // 10\\n\")])])]),e(\"p\",[a._v(\"如果字符串包含对于指定进制无意义的字符，则从最高位开始，只返回可以转换的数值。如果最高位无法转换，则直接返回\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"parseInt('1546', 2) // 1\\nparseInt('546', 2) // NaN\\n\")])])]),e(\"p\",[a._v(\"上面代码中，对于二进制来说，\"),e(\"code\",[a._v(\"1\")]),a._v(\"是有意义的字符，\"),e(\"code\",[a._v(\"5\")]),a._v(\"、\"),e(\"code\",[a._v(\"4\")]),a._v(\"、\"),e(\"code\",[a._v(\"6\")]),a._v(\"都是无意义的字符，所以第一行返回1，第二行返回\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"。\")]),a._v(\" \"),e(\"p\",[a._v(\"前面说过，如果\"),e(\"code\",[a._v(\"parseInt\")]),a._v(\"的第一个参数不是字符串，会被先转为字符串。这会导致一些令人意外的结果。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"parseInt(0x11, 36) // 43\\nparseInt(0x11, 2) // 1\\n\\n// 等同于\\nparseInt(String(0x11), 36)\\nparseInt(String(0x11), 2)\\n\\n// 等同于\\nparseInt('17', 36)\\nparseInt('17', 2)\\n\")])])]),e(\"p\",[a._v(\"上面代码中，十六进制的\"),e(\"code\",[a._v(\"0x11\")]),a._v(\"会被先转为十进制的17，再转为字符串。然后，再用36进制或二进制解读字符串\"),e(\"code\",[a._v(\"17\")]),a._v(\"，最后返回结果\"),e(\"code\",[a._v(\"43\")]),a._v(\"和\"),e(\"code\",[a._v(\"1\")]),a._v(\"。\")]),a._v(\" \"),e(\"p\",[a._v(\"这种处理方式，对于八进制的前缀0，尤其需要注意。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"parseInt(011, 2) // NaN\\n\\n// 等同于\\nparseInt(String(011), 2)\\n\\n// 等同于\\nparseInt(String(9), 2)\\n\")])])]),e(\"p\",[a._v(\"上面代码中，第一行的\"),e(\"code\",[a._v(\"011\")]),a._v(\"会被先转为字符串\"),e(\"code\",[a._v(\"9\")]),a._v(\"，因为\"),e(\"code\",[a._v(\"9\")]),a._v(\"不是二进制的有效字符，所以返回\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"。如果直接计算\"),e(\"code\",[a._v(\"parseInt('011', 2)\")]),a._v(\"，\"),e(\"code\",[a._v(\"011\")]),a._v(\"则是会被当作二进制处理，返回3。\")]),a._v(\" \"),e(\"p\",[a._v(\"JavaScript 不再允许将带有前缀0的数字视为八进制数，而是要求忽略这个\"),e(\"code\",[a._v(\"0\")]),a._v(\"。但是，为了保证兼容性，大部分浏览器并没有部署这一条规定。\")]),a._v(\" \"),e(\"h3\",{attrs:{id:\"parsefloat\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#parsefloat\"}},[a._v(\"#\")]),a._v(\" parseFloat\")]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"parseFloat\")]),a._v(\"方法用于将一个字符串转为浮点数。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"parseFloat('3.14') // 3.14\\n\")])])]),e(\"p\",[a._v(\"如果字符串符合科学计数法，则会进行相应的转换。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"parseFloat('314e-2') // 3.14\\nparseFloat('0.0314E+2') // 3.14\\n\")])])]),e(\"p\",[a._v(\"如果字符串包含不能转为浮点数的字符，则不再进行往后转换，返回已经转好的部分。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"parseFloat('3.14more non-digit characters') // 3.14\\n\")])])]),e(\"p\",[e(\"code\",[a._v(\"parseFloat\")]),a._v(\"方法会自动过滤字符串前导的空格。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"parseFloat('\\\\t\\\\v\\\\r12.34\\\\n ') // 12.34\\n\")])])]),e(\"p\",[a._v(\"如果参数不是字符串，或者字符串的第一个字符不能转化为浮点数，则返回\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"parseFloat([]) // NaN\\nparseFloat('FF2') // NaN\\nparseFloat('') // NaN\\n\")])])]),e(\"p\",[a._v(\"上面代码中，尤其值得注意，\"),e(\"code\",[a._v(\"parseFloat\")]),a._v(\"会将空字符串转为\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"。\")]),a._v(\" \"),e(\"p\",[a._v(\"这些特点使得\"),e(\"code\",[a._v(\"parseFloat\")]),a._v(\"的转换结果不同于\"),e(\"code\",[a._v(\"Number\")]),a._v(\"函数。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"parseFloat(true)  // NaN\\nNumber(true) // 1\\n\\nparseFloat(null) // NaN\\nNumber(null) // 0\\n\\nparseFloat('') // NaN\\nNumber('') // 0\\n\\nparseFloat('123.45#') // 123.45\\nNumber('123.45#') // NaN\\n\")])])]),e(\"h3\",{attrs:{id:\"isnan\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#isnan\"}},[a._v(\"#\")]),a._v(\" isNaN\")]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"isNaN\")]),a._v(\"方法可以用来判断一个值是否为\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"isNaN(NaN) // true\\nisNaN(123) // false\\n\")])])]),e(\"p\",[a._v(\"但是，\"),e(\"code\",[a._v(\"isNaN\")]),a._v(\"只对数值有效，如果传入其他值，会被先转成数值。比如，传入字符串的时候，字符串会被先转成\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"，所以最后返回\"),e(\"code\",[a._v(\"true\")]),a._v(\"，这一点要特别引起注意。也就是说，\"),e(\"code\",[a._v(\"isNaN\")]),a._v(\"为\"),e(\"code\",[a._v(\"true\")]),a._v(\"的值，有可能不是\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"，而是一个字符串。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"isNaN('Hello') // true\\n// 相当于\\nisNaN(Number('Hello')) // true\\n\")])])]),e(\"p\",[a._v(\"出于同样的原因，对于对象和数组，\"),e(\"code\",[a._v(\"isNaN\")]),a._v(\"也返回\"),e(\"code\",[a._v(\"true\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"isNaN({}) // true\\n// 等同于\\nisNaN(Number({})) // true\\n\\nisNaN(['xzy']) // true\\n// 等同于\\nisNaN(Number(['xzy'])) // true\\n\")])])]),e(\"p\",[a._v(\"但是，对于空数组和只有一个数值成员的数组，\"),e(\"code\",[a._v(\"isNaN\")]),a._v(\"返回\"),e(\"code\",[a._v(\"false\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"isNaN([]) // false\\nisNaN([123]) // false\\nisNaN(['123']) // false\\n\")])])]),e(\"p\",[a._v(\"上面代码之所以返回\"),e(\"code\",[a._v(\"false\")]),a._v(\"，原因是这些数组能被\"),e(\"code\",[a._v(\"Number\")]),a._v(\"函数转成数值，请参见《数据类型转换》一章。\")]),a._v(\" \"),e(\"p\",[a._v(\"因此，使用\"),e(\"code\",[a._v(\"isNaN\")]),a._v(\"之前，最好判断一下数据类型。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"function myIsNaN(value) {\\n  return typeof value === 'number' && isNaN(value);\\n}\\n\")])])]),e(\"p\",[a._v(\"判断\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"更可靠的方法是，利用\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"为唯一不等于自身的值的这个特点，进行判断。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"function myIsNaN(value) {\\n  return value !== value;\\n}\\n\")])])]),e(\"h3\",{attrs:{id:\"isfinite\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#isfinite\"}},[a._v(\"#\")]),a._v(\" isFinite\")]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"isFinite\")]),a._v(\"方法返回一个布尔值，表示某个值是否为正常的数值。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"isFinite(Infinity) // false\\nisFinite(-Infinity) // false\\nisFinite(NaN) // false\\nisFinite(undefined) // false\\nisFinite(null) // true\\nisFinite(-1) // true\\n\")])])]),e(\"p\",[a._v(\"除了\"),e(\"code\",[a._v(\"Infinity\")]),a._v(\"、\"),e(\"code\",[a._v(\"-Infinity\")]),a._v(\"、\"),e(\"code\",[a._v(\"NaN\")]),a._v(\"和\"),e(\"code\",[a._v(\"undefined\")]),a._v(\"这几个值会返回\"),e(\"code\",[a._v(\"false\")]),a._v(\"，\"),e(\"code\",[a._v(\"isFinite\")]),a._v(\"对于其他的数值都会返回\"),e(\"code\",[a._v(\"true\")]),a._v(\"。\")]),a._v(\" \"),e(\"h2\",{attrs:{id:\"字符串\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#字符串\"}},[a._v(\"#\")]),a._v(\" 字符串\")]),a._v(\" \"),e(\"p\",[a._v(\"字符串可以被视为字符数组，因此可以使用数组的方括号运算符，用来返回某个位置的字符（位置编号从0开始）。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v('var s = \\'hello\\';\\ns[0] // \"h\"\\ns[1] // \"e\"\\ns[4] // \"o\"\\n\\n// 直接对字符串使用方括号运算符\\n\\'hello\\'[1] // \"e\"\\n')])])]),e(\"p\",[a._v(\"如果方括号中的数字超过字符串的长度，或者方括号中根本不是数字，则返回\"),e(\"code\",[a._v(\"undefined\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"'abc'[3] // undefined\\n'abc'[-1] // undefined\\n'abc'['x'] // undefined\\n\")])])]),e(\"p\",[a._v(\"但是，字符串与数组的相似性仅此而已。实际上，无法改变字符串之中的单个字符。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"var s = 'hello';\\n\\ndelete s[0];\\ns // \\\"hello\\\"\\n\\ns[1] = 'a';\\ns // \\\"hello\\\"\\n\\ns[5] = '!';\\ns // \\\"hello\\\"\\n\")])])]),e(\"p\",[a._v(\"上面代码表示，字符串内部的单个字符无法改变和增删，这些操作会默默地失败。\")]),a._v(\" \"),e(\"h2\",{attrs:{id:\"对象\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对象\"}},[a._v(\"#\")]),a._v(\" 对象\")]),a._v(\" \"),e(\"p\",[a._v(\"对象采用大括号表示，这导致了一个问题：如果行首是一个大括号，它到底是表达式还是语句？\")]),a._v(\" \"),e(\"p\",[a._v(\"为了避免这种歧义，JavaScript 引擎的做法是，如果遇到这种情况，无法确定是对象还是代码块，一律解释为代码块。\")]),a._v(\" \"),e(\"p\",[a._v(\"如果要解释为对象，最好在大括号前加上圆括号。因为圆括号的里面，只能是表达式，所以确保大括号只能解释为对象。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language-js extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\" foo\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\":\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"123\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 正确\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\" console\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"log\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"123\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 报错\")]),a._v(\"\\n\")])])]),e(\"p\",[a._v(\"这种差异在\"),e(\"code\",[a._v(\"eval\")]),a._v(\"语句（作用是对字符串求值）中反映得最明显。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language-js extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"eval\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v(\"'{foo: 123}'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 123\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"eval\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v(\"'({foo: 123})'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// {foo: 123}\")]),a._v(\"\\n\")])])]),e(\"p\",[a._v(\"上面代码中，如果没有圆括号，\"),e(\"code\",[a._v(\"eval\")]),a._v(\"将其理解为一个代码块；加上圆括号以后，就理解成一个对象。\")]),a._v(\" \"),e(\"h3\",{attrs:{id:\"属性读取\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#属性读取\"}},[a._v(\"#\")]),a._v(\" 属性读取\")]),a._v(\" \"),e(\"p\",[a._v(\"读取对象的属性，有两种方法，一种是使用点运算符，还有一种是使用方括号运算符。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language-js extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"var\")]),a._v(\" obj \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n  p\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\":\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v(\"'Hello World'\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\\nobj\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"p \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v('// \"Hello World\"')]),a._v(\"\\nobj\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v(\"'p'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"]\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v('// \"Hello World\"')]),a._v(\"\\n\")])])]),e(\"div\",{staticClass:\"language-js extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"var\")]),a._v(\" foo \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v(\"'bar'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"var\")]),a._v(\" obj \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n  foo\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\":\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"1\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n  bar\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\":\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"2\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\\nobj\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"foo  \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 1\")]),a._v(\"\\nobj\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"[\")]),a._v(\"foo\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"]\")]),a._v(\"  \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v(\"// 2\")]),a._v(\"\\n\")])])]),e(\"p\",[a._v(\"方括号运算符内部还可以使用表达式。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language-js extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[a._v(\"obj\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v(\"'hello'\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"+\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v(\"' world'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"]\")]),a._v(\"\\nobj\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"3\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"+\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"3\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"]\")]),a._v(\"\\n\")])])]),e(\"p\",[a._v(\"方括号运算符内部还可以使用表达式。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language-js extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[a._v(\"obj\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v(\"'hello'\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"+\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v(\"' world'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"]\")]),a._v(\"\\nobj\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"3\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"+\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"3\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"]\")]),a._v(\"\\n\")])])]),e(\"p\",[a._v(\"数字键可以不加引号，因为会自动转成字符串。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language-js extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[a._v(\"var\")]),a._v(\" obj \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\"=\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n  \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"0.7\")]),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\":\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v(\"'Hello World'\")]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\";\")]),a._v(\"\\n\\nobj\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v(\"'0.7'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"]\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v('// \"Hello World\"')]),a._v(\"\\nobj\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"[\")]),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[a._v(\"0.7\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"]\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[a._v('// \"Hello World\"')]),a._v(\"\\n\")])])]),e(\"p\",[a._v(\"上面代码中，对象\"),e(\"code\",[a._v(\"obj\")]),a._v(\"的数字键\"),e(\"code\",[a._v(\"0.7\")]),a._v(\"，加不加引号都可以，因为会被自动转为字符串。\")]),a._v(\" \"),e(\"p\",[a._v(\"注意，数值键名不能使用点运算符（因为会被当成小数点），只能使用方括号运算符。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"var obj = {\\n  123: 'hello world'\\n};\\n\\nobj.123 // 报错\\nobj[123] // \\\"hello world\\\"\\n\")])])]),e(\"p\",[a._v(\"上面代码的第一个表达式，对数值键名\"),e(\"code\",[a._v(\"123\")]),a._v(\"使用点运算符，结果报错。第二个表达式使用方括号运算符，结果就是正确的。\")]),a._v(\" \"),e(\"h3\",{attrs:{id:\"属性的赋值\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#属性的赋值\"}},[a._v(\"#\")]),a._v(\" 属性的赋值\")]),a._v(\" \"),e(\"p\",[a._v(\"点运算符和方括号运算符，不仅可以用来读取值，还可以用来赋值。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"var obj = {};\\n\\nobj.foo = 'Hello';\\nobj['bar'] = 'World';\\n\")])])]),e(\"p\",[a._v(\"上面代码中，分别使用点运算符和方括号运算符，对属性赋值。\")]),a._v(\" \"),e(\"p\",[a._v(\"JavaScript 允许属性的“后绑定”，也就是说，你可以在任意时刻新增属性，没必要在定义对象的时候，就定义好属性。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"var obj = { p: 1 };\\n\\n// 等价于\\n\\nvar obj = {};\\nobj.p = 1;\\n\")])])]),e(\"h3\",{attrs:{id:\"属性的查看\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#属性的查看\"}},[a._v(\"#\")]),a._v(\" 属性的查看\")]),a._v(\" \"),e(\"p\",[a._v(\"查看一个对象本身的所有属性，可以使用\"),e(\"code\",[a._v(\"Object.keys\")]),a._v(\"方法。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"var obj = {\\n  key1: 1,\\n  key2: 2\\n};\\n\\nObject.keys(obj);\\n// ['key1', 'key2']\\n\")])])]),e(\"p\",[e(\"code\",[a._v(\"**Object.keys()**\")]),a._v(\" 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用 \"),e(\"a\",{attrs:{href:\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e(\"code\",[a._v(\"for...in\")]),e(\"OutboundLink\")],1),a._v(\" 循环遍历该对象时返回的顺序一致 。顺序遍历一个对象的除\"),e(\"a\",{attrs:{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"Symbol\"),e(\"OutboundLink\")],1),a._v(\"以外的\"),e(\"a\",{attrs:{href:\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"可枚举\"),e(\"OutboundLink\")],1),a._v(\"属性。\")]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"for...in\")]),a._v(\" 循环只遍历可枚举属性（包括它的原型链上的可枚举属性）。像 \"),e(\"code\",[a._v(\"Array\")]),a._v(\"和 \"),e(\"code\",[a._v(\"Object\")]),a._v(\"使用内置构造函数所创建的对象都会继承自\"),e(\"code\",[a._v(\"Object.prototype\")]),a._v(\"和\"),e(\"code\",[a._v(\"String.prototype\")]),a._v(\"的不可枚举属性，例如 \"),e(\"a\",{attrs:{href:\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/String\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e(\"code\",[a._v(\"String\")]),e(\"OutboundLink\")],1),a._v(\" 的 \"),e(\"a\",{attrs:{href:\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e(\"code\",[a._v(\"indexOf()\")]),e(\"OutboundLink\")],1),a._v(\"  方法或 \"),e(\"a\",{attrs:{href:\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e(\"code\",[a._v(\"Object\")]),e(\"OutboundLink\")],1),a._v(\"的\"),e(\"a\",{attrs:{href:\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e(\"code\",[a._v(\"toString()\")]),e(\"OutboundLink\")],1),a._v(\"方法。循环将遍历对象本身的所有可枚举属性，以及对象从其构造函数原型中继承的属性（更接近原型链中对象的属性覆盖原型属性）。\")]),a._v(\" \"),e(\"h3\",{attrs:{id:\"属性的删除：delete-命令\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#属性的删除：delete-命令\"}},[a._v(\"#\")]),a._v(\" 属性的删除：delete 命令\")]),a._v(\" \"),e(\"p\",[a._v(\"注意，删除一个不存在的属性，\"),e(\"code\",[a._v(\"delete\")]),a._v(\"不报错，而且返回\"),e(\"code\",[a._v(\"true\")]),a._v(\"。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"var obj = {};\\ndelete obj.p // true\\n\")])])]),e(\"p\",[a._v(\"只有一种情况，\"),e(\"code\",[a._v(\"delete\")]),a._v(\"命令会返回\"),e(\"code\",[a._v(\"false\")]),a._v(\"，那就是该属性存在，且不得删除。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"var obj = Object.defineProperty({}, 'p', {\\n  value: 123,\\n  configurable: false\\n});\\n\\nobj.p // 123\\ndelete obj.p // false\\n\")])])]),e(\"p\",[e(\"code\",[a._v(\"delete\")]),a._v(\"命令只能删除对象本身的属性，无法删除继承的属性\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"var obj = {};\\ndelete obj.toString // true\\nobj.toString // function toString() { [native code] }\\n\")])])]),e(\"h3\",{attrs:{id:\"属性是否存在：in-运算符\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#属性是否存在：in-运算符\"}},[a._v(\"#\")]),a._v(\" 属性是否存在：in 运算符\")]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"in\")]),a._v(\"运算符用于检查对象是否包含某个属性（注意，检查的是键名，不是键值），如果包含就返回\"),e(\"code\",[a._v(\"true\")]),a._v(\"，否则返回\"),e(\"code\",[a._v(\"false\")]),a._v(\"。它的左边是一个字符串，表示属性名，右边是一个对象。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"var obj = { p: 1 };\\n'p' in obj // true\\n'toString' in obj // true\\n\")])])]),e(\"p\",[e(\"code\",[a._v(\"in\")]),a._v(\"运算符的一个问题是，它不能识别哪些属性是对象自身的，哪些属性是继承的。就像上面代码中，对象\"),e(\"code\",[a._v(\"obj\")]),a._v(\"本身并没有\"),e(\"code\",[a._v(\"toString\")]),a._v(\"属性，但是\"),e(\"code\",[a._v(\"in\")]),a._v(\"运算符会返回\"),e(\"code\",[a._v(\"true\")]),a._v(\"，因为这个属性是继承的。\")]),a._v(\" \"),e(\"p\",[a._v(\"这时，可以使用对象的\"),e(\"code\",[a._v(\"hasOwnProperty\")]),a._v(\"方法判断一下，是否为对象自身的属性。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"var obj = {};\\nif ('toString' in obj) {\\n  console.log(obj.hasOwnProperty('toString')) // false\\n}\\n\")])])]),e(\"h3\",{attrs:{id:\"属性的遍历：for-in-循环\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#属性的遍历：for-in-循环\"}},[a._v(\"#\")]),a._v(\" 属性的遍历：for...in 循环\")]),a._v(\" \"),e(\"p\",[e(\"code\",[a._v(\"for...in\")]),a._v(\"循环用来遍历一个对象的全部属性。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"var obj = {a: 1, b: 2, c: 3};\\n\\nfor (var i in obj) {\\n  console.log('键名：', i);\\n  console.log('键值：', obj[i]);\\n}\\n// 键名： a\\n// 键值： 1\\n// 键名： b\\n// 键值： 2\\n// 键名： c\\n// 键值： 3\\n\")])])]),e(\"p\",[e(\"code\",[a._v(\"for...in\")]),a._v(\"循环有两个使用注意点。\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。\")]),a._v(\" \"),e(\"li\",[a._v(\"它不仅遍历对象自身的属性，还遍历继承的属性。\")])]),a._v(\" \"),e(\"p\",[a._v(\"举例来说，对象都继承了\"),e(\"code\",[a._v(\"toString\")]),a._v(\"属性，但是\"),e(\"code\",[a._v(\"for...in\")]),a._v(\"循环不会遍历到这个属性。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"var obj = {};\\n\\n// toString 属性是存在的\\nobj.toString // toString() { [native code] }\\n\\nfor (var p in obj) {\\n  console.log(p);\\n} // 没有任何输出\\n\")])])]),e(\"p\",[a._v(\"上面代码中，对象\"),e(\"code\",[a._v(\"obj\")]),a._v(\"继承了\"),e(\"code\",[a._v(\"toString\")]),a._v(\"属性，该属性不会被\"),e(\"code\",[a._v(\"for...in\")]),a._v(\"循环遍历到，因为它默认是“不可遍历”的。\")]),a._v(\" \"),e(\"p\",[a._v(\"如果继承的属性是可遍历的，那么就会被\"),e(\"code\",[a._v(\"for...in\")]),a._v(\"循环遍历到。但是，一般情况下，都是只想遍历对象自身的属性，所以使用\"),e(\"code\",[a._v(\"for...in\")]),a._v(\"的时候，应该结合使用\"),e(\"code\",[a._v(\"hasOwnProperty\")]),a._v(\"方法，在循环内部判断一下，某个属性是否为对象自身的属性。\")]),a._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[a._v(\"var person = { name: '老张' };\\n\\nfor (var key in person) {\\n  if (person.hasOwnProperty(key)) {\\n    console.log(key);\\n  }\\n}\\n// name\\n\")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);","extractedComments":[]}