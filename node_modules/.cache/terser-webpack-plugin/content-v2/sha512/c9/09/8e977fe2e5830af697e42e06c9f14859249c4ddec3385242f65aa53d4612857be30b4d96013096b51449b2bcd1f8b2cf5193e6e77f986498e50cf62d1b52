{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[172],{961:function(e,t,s){\"use strict\";s.r(t);var a=s(43),v=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"node-js-事件循环\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#node-js-事件循环\"}},[e._v(\"#\")]),e._v(\" Node.js 事件循环\")]),e._v(\" \"),s(\"p\",[e._v(\"Node.js 是单进程单线程应用程序，但是因为 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以性能非常高。\")]),e._v(\" \"),s(\"p\",[e._v(\"Node.js 几乎每一个 API 都是支持回调函数的。\")]),e._v(\" \"),s(\"p\",[e._v(\"Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。\")]),e._v(\" \"),s(\"p\",[e._v(\"Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.\")]),e._v(\" \"),s(\"hr\"),e._v(\" \"),s(\"h2\",{attrs:{id:\"事件驱动程序\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事件驱动程序\"}},[e._v(\"#\")]),e._v(\" 事件驱动程序\")]),e._v(\" \"),s(\"p\",[e._v(\"Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。\")]),e._v(\" \"),s(\"p\",[e._v(\"当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。\")]),e._v(\" \"),s(\"p\",[e._v(\"这个模型非常高效可扩展性非常强，因为 webserver 一直接受请求而不等待任何读写操作。（这也称之为非阻塞式IO或者事件驱动IO）\")]),e._v(\" \"),s(\"p\",[e._v(\"在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://www.runoob.com/wp-content/uploads/2015/09/event_loop.jpg\",alt:\"img\"}})]),e._v(\" \"),s(\"p\",[e._v(\"整个事件驱动的流程就是这么实现的，非常简洁。有点类似于观察者模式，事件相当于一个主题(Subject)，而所有注册到这个事件上的处理函数相当于观察者(Observer)。\")]),e._v(\" \"),s(\"p\",[e._v(\"Node.js 有多个内置的事件，我们可以通过引入 events 模块，并通过实例化 EventEmitter 类来绑定和监听事件，如下实例：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"// 引入 events 模块\\nvar events = require('events');\\n// 创建 eventEmitter 对象\\nvar eventEmitter = new events.EventEmitter();\\n\")])])]),s(\"p\",[e._v(\"以下程序绑定事件处理程序：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"// 绑定事件及事件的处理程序\\neventEmitter.on('eventName', eventHandler);\\n\")])])]),s(\"p\",[e._v(\"我们可以通过程序触发事件：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"// 触发事件\\neventEmitter.emit('eventName');\\n\")])])])])}),[],!1,null,null,null);t.default=v.exports}}]);","extractedComments":[]}