{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{1018:function(v,_,t){\"use strict\";t.r(_);var s=t(43),a=Object(s.a)({},(function(){var v=this,_=v.$createElement,s=v._self._c||_;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":v.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"计算机组成原理组成\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#计算机组成原理组成\"}},[v._v(\"#\")]),v._v(\" 计算机组成原理组成\")]),v._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:t(780),alt:\"image-20200826132410619\"}})]),v._v(\" \"),s(\"h2\",{attrs:{id:\"总线\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总线\"}},[v._v(\"#\")]),v._v(\" 总线\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"总线概述\")]),v._v(\" \"),s(\"li\",[v._v(\"总线仲裁\")])]),v._v(\" \"),s(\"h3\",{attrs:{id:\"总线概述\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总线概述\"}},[v._v(\"#\")]),v._v(\" 总线概述\")]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"总线是什么？\")])]),v._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[v._v(\"USB:通用串行总线,提供对外连接的接口，不同设备通过usb接口连接，是一个连接标准，促使外围设备接口统一。\")])]),v._v(\" \"),s(\"li\",[s(\"p\",[v._v(\"PCI总线：显卡\")])]),v._v(\" \"),s(\"li\",[s(\"p\",[v._v(\"ISA总线\")])]),v._v(\" \"),s(\"li\",[s(\"p\",[v._v(\"Thunderbolt总线（苹果电脑总线）\")])])]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"总线概述\")])]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"各种输入输出设备可以直接连接io总线\")]),v._v(\" \"),s(\"li\",[v._v(\"运算器存储器控制器也可以直接连接io\")]),v._v(\" \"),s(\"li\",[v._v(\"使得计算机各个逻辑清理\")])]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"总线分类\")])]),v._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[v._v(\"片内总线\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"芯片内的总线\")]),v._v(\" \"),s(\"li\",[v._v(\"寄存机与寄存器之间\")]),v._v(\" \"),s(\"li\",[v._v(\"寄存器与控制器、运算器之间\")])])]),v._v(\" \"),s(\"li\",[s(\"p\",[v._v(\"系统总线\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[v._v(\"比如usb总线,支持连接计算机外部设备的一条总线。\")])]),v._v(\" \"),s(\"li\",[s(\"p\",[v._v(\"数据总线\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"双向传输各个部位的数据信息\")]),v._v(\" \"),s(\"li\",[v._v(\"总线的位数(宽度)是数据总线的重要参数\")]),v._v(\" \"),s(\"li\",[v._v(\"一般和cpu位数相同(32,64位)\")])])]),v._v(\" \"),s(\"li\",[s(\"p\",[v._v(\"地址总线\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"指定源数据和目的数据在内存的地址\")]),v._v(\" \"),s(\"li\",[v._v(\"位数和存储单元位数有关系\")]),v._v(\" \"),s(\"li\",[v._v(\"总线位数=n,寻址范围0-2^n\")])])]),v._v(\" \"),s(\"li\",[s(\"p\",[v._v(\"控制总线\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"控制总线发出各种控制信号的传输线\")]),v._v(\" \"),s(\"li\",[v._v(\"控制信号由控制职能管辖从一个组件发给另一个组件\")]),v._v(\" \"),s(\"li\",[v._v(\"可以监控不同组件之间的状态（键盘就绪未就绪）\")])])])])])]),v._v(\" \"),s(\"h3\",{attrs:{id:\"总线仲裁\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总线仲裁\"}},[v._v(\"#\")]),v._v(\" 总线仲裁\")]),v._v(\" \"),s(\"p\",[v._v(\"解决总线使用权的冲突问题\")]),v._v(\" \"),s(\"p\",[v._v(\"总线仲裁的方法：\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"链式查询\")]),v._v(\" \"),s(\"li\",[v._v(\"计时器定时查询\")]),v._v(\" \"),s(\"li\",[v._v(\"独立请求\")])]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"链式查询\")])]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"好处：电路复杂度低，仲裁方式简单。\")]),v._v(\" \"),s(\"li\",[v._v(\"坏处：优先级低的设备难以获得总线使用权。\")]),v._v(\" \"),s(\"li\",[v._v(\"坏处：对电路故障敏感\")])]),v._v(\" \"),s(\"p\",[v._v(\"设备2发出请求使用，仲裁控制器发送信号，设备1接收后，他如果不使用总线，就允许他往后面执行\")]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"计时器定时查询\")])]),v._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:t(781),alt:\"image-20200826151834966\"}})]),v._v(\" \"),s(\"p\",[v._v(\"设备3发出请求，计时器接收后，然后定时发送\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"仲裁控制器对设备编号并使用计数器累计计数\")]),v._v(\" \"),s(\"li\",[v._v(\"接收到仲裁信号后，往所有设备发出计数值\")]),v._v(\" \"),s(\"li\",[v._v(\"计数值与设备编号一 致则获得总线使用权\")])]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"独立请求\")])]),v._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:t(782),alt:\"image-20200826152452545\"}})]),v._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[v._v(\"每个设备独立连接仲裁器\")])]),v._v(\" \"),s(\"li\",[s(\"p\",[v._v(\"设备单独向仲裁器发送请求接收请求\")])]),v._v(\" \"),s(\"li\",[s(\"p\",[v._v(\"同时收到多个请求，仲裁器有权按优先级分配使用权\")])]),v._v(\" \"),s(\"li\",[s(\"p\",[v._v(\"好处\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"响应速度快，优先顺序动态改变\")]),v._v(\" \"),s(\"li\",[v._v(\"设备连线多，相对复杂\")])])])]),v._v(\" \"),s(\"h2\",{attrs:{id:\"输入输出设备\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#输入输出设备\"}},[v._v(\"#\")]),v._v(\" 输入输出设备\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"常见设备\")]),v._v(\" \"),s(\"li\",[v._v(\"通用设计\")]),v._v(\" \"),s(\"li\",[v._v(\"CPU和IO通信的两个方法\")])]),v._v(\" \"),s(\"h3\",{attrs:{id:\"常见输入输出设备\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常见输入输出设备\"}},[v._v(\"#\")]),v._v(\" 常见输入输出设备\")]),v._v(\" \"),s(\"p\",[v._v(\"常见输入设备：字符输入设备，图形输入设备\")]),v._v(\" \"),s(\"p\",[v._v(\"常见输出设备：显示器\")]),v._v(\" \"),s(\"h3\",{attrs:{id:\"输入输出接口通用设计\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#输入输出接口通用设计\"}},[v._v(\"#\")]),v._v(\" 输入输出接口通用设计\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[v._v(\"数据线：传输数据\")])]),v._v(\" \"),s(\"li\",[s(\"p\",[v._v(\"状态线：查询是否正常连接，是否被占用\")])]),v._v(\" \"),s(\"li\",[s(\"p\",[v._v(\"命令线：cpu向设备发送命令的信号线、发送读写信号、发送启动停止信号停止光驱\")])]),v._v(\" \"),s(\"li\",[s(\"p\",[v._v(\"设备选择线：3个u盘连接，需要通过这个线来选择具体u盘操作\")])])]),v._v(\" \"),s(\"h3\",{attrs:{id:\"cpu和io通信方法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cpu和io通信方法\"}},[v._v(\"#\")]),v._v(\" CPU和IO通信方法\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"程序中断\")]),v._v(\" \"),s(\"li\",[v._v(\"DMA(直接存储器访问 )\")])]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"程序中断\")])]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"当外围IO设备就绪时，向CPU发出中断信号\")]),v._v(\" \"),s(\"li\",[v._v(\"CPU有专门的电路响应中断信号。\")]),v._v(\" \"),s(\"li\",[v._v(\"提供低速设备通知CPU的一种异步方式\")]),v._v(\" \"),s(\"li\",[v._v(\"CPU可以告诉运转的同时兼顾低速设备的响应\")])]),v._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:t(783),alt:\"image-20200826155729886\"}})]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"DMA(直接存储器访问)\")])]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"DMA直接连接主存和IO设备\")]),v._v(\" \"),s(\"li\",[v._v(\"DMA工作时不需要CPU参与\")]),v._v(\" \"),s(\"li\",[v._v(\"硬盘、显卡都有DMA设备\")])]),v._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:t(784),alt:\"image-20200826155928346\"}})]),v._v(\" \"),s(\"h2\",{attrs:{id:\"存储器概览\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#存储器概览\"}},[v._v(\"#\")]),v._v(\" 存储器概览\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"存储器分类\")]),v._v(\" \"),s(\"li\",[v._v(\"存储器层次结构\")])]),v._v(\" \"),s(\"h3\",{attrs:{id:\"存储器分类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#存储器分类\"}},[v._v(\"#\")]),v._v(\" 存储器分类\")]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"按存储介质分类：\")])]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"半导体存储器：内存、U盘、固态\")]),v._v(\" \"),s(\"li\",[v._v(\"磁存储器：磁带、磁盘\")])]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"按照存取方式分类:\")])]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"随机存储器RAM：可存可写，随机读取，和位置无关\")]),v._v(\" \"),s(\"li\",[v._v(\"串行存储器：与位置有关，按顺序查找\")]),v._v(\" \"),s(\"li\",[v._v(\"只读存储器ROM：只能读取。\")])]),v._v(\" \"),s(\"h3\",{attrs:{id:\"存储器层次结构\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#存储器层次结构\"}},[v._v(\"#\")]),v._v(\" 存储器层次结构\")]),v._v(\" \"),s(\"p\",[v._v(\"容量+价格=>位价：每比特位价格\")]),v._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:t(785),alt:\"image-20200826160925942\"}})]),v._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:t(786),alt:\"image-20200826161012805\"}})]),v._v(\" \"),s(\"p\",[v._v(\"缓存-主存层次：\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"原理：局部性原理（程序经常访问的内存会放在一个较小的区域，把这段内存置换到缓存）\")]),v._v(\" \"),s(\"li\",[v._v(\"实现：CPU和主存之间增加一层速度快容量小的Cache\")]),v._v(\" \"),s(\"li\",[v._v(\"目的：解决主存和CPU性能不匹配的问题\")])]),v._v(\" \"),s(\"p\",[v._v(\"主存-辅存层次\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"原理：局部性原理\")]),v._v(\" \"),s(\"li\",[v._v(\"实现：主存外增加U盘、磁盘等\")]),v._v(\" \"),s(\"li\",[v._v(\"目的：解决主存容量不足问题(游戏20G,内存8G,把当前运行的部分代码放在主存，不需要的放在辅存)\")])]),v._v(\" \"),s(\"h2\",{attrs:{id:\"存储器-主存和辅存\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#存储器-主存和辅存\"}},[v._v(\"#\")]),v._v(\" 存储器-主存和辅存\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"主存储器-内存\")]),v._v(\" \"),s(\"li\",[v._v(\"辅存储器-硬盘\")])]),v._v(\" \"),s(\"blockquote\",[s(\"ul\",[s(\"li\",[v._v(\"计算机断电后内存数据丢失\")]),v._v(\" \"),s(\"li\",[v._v(\"计算机断电后磁盘数据不会丢失\")])])]),v._v(\" \"),s(\"h3\",{attrs:{id:\"主存\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#主存\"}},[v._v(\"#\")]),v._v(\" 主存\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"RAM随机存储\")]),v._v(\" \"),s(\"li\",[v._v(\"RAM通过电容存储，必须每隔一段时间刷新一次，如果掉电，那么一段时间后就丢失所有数据\")])]),v._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:t(787),alt:\"image-20200826165049436\"}})]),v._v(\" \"),s(\"p\",[v._v(\"32位系统：2^32 = 4GB,最多支持4GB内存\")]),v._v(\" \"),s(\"p\",[v._v(\"64位系统：2^64 =2^34GB内存\")]),v._v(\" \"),s(\"h3\",{attrs:{id:\"辅存和辅存算法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#辅存和辅存算法\"}},[v._v(\"#\")]),v._v(\" 辅存和辅存算法\")]),v._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:t(788),alt:\"image-20200826173435067\"}})]),v._v(\" \"),s(\"p\",[v._v(\"磁盘\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"表面是可磁化的硬磁特性材料\")]),v._v(\" \"),s(\"li\",[v._v(\"移动磁头径向运动读取磁道信息\")])]),v._v(\" \"),s(\"p\",[v._v(\"磁盘算法\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[v._v(\"先来先服务算法\")])]),v._v(\" \"),s(\"li\",[s(\"p\",[v._v(\"最短寻道时间优先算法\")])]),v._v(\" \"),s(\"li\",[s(\"p\",[v._v(\"扫描算法(电梯算法)\")])]),v._v(\" \"),s(\"li\",[s(\"p\",[v._v(\"循环扫描算法\")])])]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"先来先服务算法\")])]),v._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:t(789),alt:\"image-20200826181331046\"}})]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"按顺序访问进程的磁道读写需求\")])]),v._v(\" \"),s(\"p\",[v._v(\"读取顺序 1=》4=》2=》3=》5\")]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"最短寻道时间优先算法\")])]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"和磁头当前位置有关\")]),v._v(\" \"),s(\"li\",[v._v(\"优先访问离磁头最近的磁道\")])]),v._v(\" \"),s(\"p\",[v._v(\"读取顺序：\")]),v._v(\" \"),s(\"p\",[v._v(\"当前磁头位于4，首先读取4，然后读取5，接着可能读取5或者读取3，假设我们读5，那么接下来读取3，然后读取2，然后读取1，然后读取1。\")]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"扫描算法(电梯算法)\")])]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"每次只往一个方向运动，到达一个方向尽头再反方向移动\")]),v._v(\" \"),s(\"li\",[v._v(\"不公平\")])]),v._v(\" \"),s(\"p\",[v._v(\"例子\")]),v._v(\" \"),s(\"div\",{staticClass:\"language-js extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[v._v(\"磁头在磁道\"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"4\")]),v._v(\"\\n磁头方向向外\\n读取 \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"142315\")]),v._v(\"\\n读取顺序：\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"432115\")]),v._v(\"\\n\")])])]),s(\"p\",[s(\"strong\",[v._v(\"循环扫描算法\")])]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"只往一个方向读取。读完再从那个方向的开头开始往下读\")])]),v._v(\" \"),s(\"p\",[v._v(\"例子\")]),v._v(\" \"),s(\"div\",{staticClass:\"language-js extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[v._v(\"磁头在磁道\"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"4\")]),v._v(\"\\n磁头方向向内\\n读取 \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"142315\")]),v._v(\"的顺序\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"4\")]),v._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"5\")]),v._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"1\")]),v._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"1\")]),v._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"2\")]),v._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"3\")]),v._v(\"\\n\")])])]),s(\"h2\",{attrs:{id:\"存储器-高速缓存\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#存储器-高速缓存\"}},[v._v(\"#\")]),v._v(\" 存储器-高速缓存\")]),v._v(\" \"),s(\"p\",[v._v(\"高速缓存位于 缓存-主存层次\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[v._v(\"高速缓存工作原理\")])]),v._v(\" \"),s(\"li\",[s(\"p\",[v._v(\"高速缓存替换策略\")])])]),v._v(\" \"),s(\"h3\",{attrs:{id:\"字和字块\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#字和字块\"}},[v._v(\"#\")]),v._v(\" 字和字块\")]),v._v(\" \"),s(\"p\",[v._v(\"字：存放在一个存储单元的二进制代码组合\")]),v._v(\" \"),s(\"p\",[v._v(\"字块：存储在连续存储单元的一组字。\")]),v._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:t(790),alt:\"image-20200826182936094\"}})]),v._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:t(791),alt:\"image-20200826183212254\"}})]),v._v(\" \"),s(\"p\",[v._v(\"主存面试题：\")]),v._v(\" \"),s(\"p\",[v._v(\"假设主存用户空间容量4G,字块大小为4M,字长32位，则对应地址中块地址m和块内存地址b的位数。至少为多少？\")]),v._v(\" \"),s(\"div\",{staticClass:\"language-js extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"4\")]),v._v(\"G \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"=\")]),v._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"4096\")]),v._v(\"M\\n字块数量：\"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"4096\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"4\")]),v._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"=\")]),v._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"1024\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\"\\n字块地址 \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"2\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"^\")]),v._v(\"m \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"=\")]),v._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[v._v(\"M\")]),v._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"=\")]),v._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"1024\")]),v._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\";\")]),v._v(\" m \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"10\")]),v._v(\"\\n一个字块的字个数：字块大小\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"/\")]),v._v(\"每个字字长 \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"=\")]),v._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"4\")]),v._v(\"M\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"32\")]),v._v(\"bit \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"=\")]),v._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"1048576\")]),v._v(\" \\n块内存地址b：\"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"2\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"^\")]),v._v(\"b \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"=\")]),v._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"1048576\")]),v._v(\" b \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"=\")]),v._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"20\")]),v._v(\"\\n\\nm\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\">=\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"10\")]),v._v(\"\\nb\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\">=\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"20\")]),v._v(\"\\n\")])])]),s(\"h3\",{attrs:{id:\"高速缓存工作原理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#高速缓存工作原理\"}},[v._v(\"#\")]),v._v(\" 高速缓存工作原理\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"每次CPU都能从高速缓存取数据时，命中率为1\")])]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"命中率运算：\")])]),v._v(\" \"),s(\"p\",[v._v(\"设访问主存次数为M，访问缓存次数为C；\")]),v._v(\" \"),s(\"p\",[v._v(\"命中率h = C /(M+C)\")]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"访问效率\")])]),v._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:t(792),alt:\"image-20200826184418769\"}})]),v._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:t(793),alt:\"image-20200826183930777\"}})]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"CPU需要的数据在缓存里\")]),v._v(\" \"),s(\"li\",[v._v(\"CPU需要的数据不在缓存里\")]),v._v(\" \"),s(\"li\",[v._v(\"不在缓存的数据需要去主存拿\")])]),v._v(\" \"),s(\"p\",[v._v(\"面试题\")]),v._v(\" \"),s(\"p\",[v._v(\"例子:假设CPU在执行某段程序时，共访问了Cache命中2000次，访问主存50次，已知Cache的存取时间为50ns，主存的存取时间为200ns,求Cache-主存系统的命中率、访问效率和平均访问时间。\")]),v._v(\" \"),s(\"div\",{staticClass:\"language-js extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[v._v(\"命中率 h \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"=\")]),v._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"2000\")]),v._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"2000\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[v._v(\"+\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[v._v(\"50\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[v._v(\")\")]),v._v(\"\\n\")])])]),s(\"h3\",{attrs:{id:\"高速缓存替换算法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#高速缓存替换算法\"}},[v._v(\"#\")]),v._v(\" 高速缓存替换算法\")]),v._v(\" \"),s(\"p\",[v._v(\"替换时机：缓存没有数据，就从主存载入所需要数据。\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"随机算法：随机选取一个缓存位置进行替换\")]),v._v(\" \"),s(\"li\",[v._v(\"先进先出算法FIFO:\")]),v._v(\" \"),s(\"li\",[v._v(\"最不经常使用算法LFU:\")]),v._v(\" \"),s(\"li\",[v._v(\"最近最少使用算法LRU:\")])]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"先进先出算法FIFO\")])]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"把高速缓存看做是一个先进先出的队列\")]),v._v(\" \"),s(\"li\",[v._v(\"优先替换最先进入的队列字块\")])]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"最不经常使用算法LFU\")])]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"先淘汰最不经常使用的字块\")]),v._v(\" \"),s(\"li\",[v._v(\"需要额外的空间记录使用频率,每访问一个字块，就给这个字块的频率+1；\")])]),v._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[v._v(\"缓存\")]),v._v(\" \"),s(\"th\",[v._v(\"1\")]),v._v(\" \"),s(\"th\",[v._v(\"2\")]),v._v(\" \"),s(\"th\",[v._v(\"3\")]),v._v(\" \"),s(\"th\",[v._v(\"4\")]),v._v(\" \"),s(\"th\",[v._v(\"5\")]),v._v(\" \"),s(\"th\",[v._v(\"6\")]),v._v(\" \"),s(\"th\",[v._v(\"7\")]),v._v(\" \"),s(\"th\",[v._v(\"8\")])])]),v._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[v._v(\"频率\")]),v._v(\" \"),s(\"td\",[v._v(\"7\")]),v._v(\" \"),s(\"td\",[v._v(\"4\")]),v._v(\" \"),s(\"td\",[v._v(\"2\")]),v._v(\" \"),s(\"td\",[v._v(\"1\")]),v._v(\" \"),s(\"td\",[v._v(\"8\")]),v._v(\" \"),s(\"td\",[v._v(\"4\")]),v._v(\" \"),s(\"td\",[v._v(\"2\")]),v._v(\" \"),s(\"td\",[v._v(\"6\")])])])]),v._v(\" \"),s(\"p\",[v._v(\"根据LFU算法，替换到第四个字块、\")]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"最近最少使用算法LRU:\")])]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"优先淘汰一段时间内没有使用的字块\")]),v._v(\" \"),s(\"li\",[v._v(\"一般使用双向链表\")]),v._v(\" \"),s(\"li\",[v._v(\"把当前访问节点放在链表前面(保证链表头部节点最近使用)\")])]),v._v(\" \"),s(\"p\",[v._v(\"例子：\")]),v._v(\" \"),s(\"p\",[v._v(\"假设缓存4个字块，()表示使用的字块，[]表示淘汰的字块，\")]),v._v(\" \"),s(\"p\",[v._v(\"(1) 1\")]),v._v(\" \"),s(\"p\",[v._v(\"(2) 2、1  使用2，把2放到头部。\")]),v._v(\" \"),s(\"p\",[v._v(\"(4) 4、2、1\")]),v._v(\" \"),s(\"p\",[v._v(\"(7) 7、4、2、1\")]),v._v(\" \"),s(\"p\",[v._v(\"(5) 5、7、4、2[淘汰1]\")]),v._v(\" \"),s(\"p\",[v._v(\"(4) 4、5、7、2 (把4放到链表头部)\")]),v._v(\" \"),s(\"p\",[v._v(\"(6) 6、4、5、7[淘汰末尾的2]\")]),v._v(\" \"),s(\"h2\",{attrs:{id:\"计算机指令系统\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#计算机指令系统\"}},[v._v(\"#\")]),v._v(\" 计算机指令系统\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"机器指令形成\")]),v._v(\" \"),s(\"li\",[v._v(\"机器指令操作类型\")]),v._v(\" \"),s(\"li\",[v._v(\"机器指令寻址方式\")])]),v._v(\" \"),s(\"h3\",{attrs:{id:\"机器指令的形式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#机器指令的形式\"}},[v._v(\"#\")]),v._v(\" 机器指令的形式\")]),v._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:t(794),alt:\"image-20200827114034890\"}})]),v._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[v._v(\"机器指令由操作码、地址码组成\")])]),v._v(\" \"),s(\"li\",[s(\"p\",[v._v(\"操作码：\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"操作码指明指令所要完成的操作\")]),v._v(\" \"),s(\"li\",[v._v(\"操作码的位数反映了机器的操作种类 。最多有2^8=256种操作\")])])]),v._v(\" \"),s(\"li\",[s(\"p\",[v._v(\"地址码\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"地址码直接给出操作数或者操作数的地址\")]),v._v(\" \"),s(\"li\",[v._v(\"分三地址指令、二地址指令和一地址指令\")])])])]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"地址码三地址指令\")])]),v._v(\" \"),s(\"p\",[v._v(\"addr1 op addr2 = dddr3\")]),v._v(\" \"),s(\"p\",[v._v(\"1    +    2   = 3\")]),v._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:t(795),alt:\"image-20200827114121837\"}})]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"地址码二地址指令\")])]),v._v(\" \"),s(\"p\",[v._v(\"把结果放到地址1或者地址2\")]),v._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:t(796),alt:\"image-20200827114324175\"}})]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"地址码一地址指令\")])]),v._v(\" \"),s(\"p\",[v._v(\"add1op ->add1自己对自己进行操作。\")]),v._v(\" \"),s(\"p\",[v._v(\"addr1 op ACC ->addr1  自增操作不需要第二个操作数。\")]),v._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:t(797),alt:\"image-20200827115016796\"}})]),v._v(\" \"),s(\"p\",[v._v(\"零地址指令：\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"中断操作、停机操作、空操作等等\")]),v._v(\" \"),s(\"li\",[v._v(\"无地址码\")])]),v._v(\" \"),s(\"h3\",{attrs:{id:\"机器指令操作类型\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#机器指令操作类型\"}},[v._v(\"#\")]),v._v(\" 机器指令操作类型\")]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"数据传输类型\")])]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"数据传输类型\")])]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"寄存器之间、寄存器与存储单元、存储单元之间传送\")]),v._v(\" \"),s(\"li\",[v._v(\"数据读写、交换地址数据、清零置一等操作\")])]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"算数逻辑操作类型\")])]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"加减乘除\")]),v._v(\" \"),s(\"li\",[v._v(\"与或非\")])]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"移位操作\")])]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"数据左移(乘2)、数据右移 (除2)\\n完成数据在算术逻辑单元的必要操作\")])]),v._v(\" \"),s(\"p\",[s(\"strong\",[v._v(\"控制指令操作\")])]),v._v(\" \"),s(\"h3\",{attrs:{id:\"机器指令寻址方式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#机器指令寻址方式\"}},[v._v(\"#\")]),v._v(\" 机器指令寻址方式\")]),v._v(\" \"),s(\"p\",[v._v(\"指令寻址、数据寻址\")]),v._v(\" \"),s(\"p\",[v._v(\"指令寻址\")]),v._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:t(798),alt:\"image-20200827115910086\"}})]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"顺序寻址\")]),v._v(\" \"),s(\"li\",[v._v(\"跳跃寻址\")])]),v._v(\" \"),s(\"p\",[v._v(\"数据寻址\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[v._v(\"立即寻址：指令直接获得操作数不访问寻址器\")])]),v._v(\" \"),s(\"li\",[s(\"p\",[v._v(\"直接寻址：寻找操作数简单，直接给出操作数的主存地址。地址码位数限制操作数寻址范围\")])]),v._v(\" \"),s(\"li\",[s(\"p\",[v._v(\"间接寻址：操作数寻址范围大，速度慢。\")])])]),v._v(\" \"),s(\"h2\",{attrs:{id:\"控制器\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#控制器\"}},[v._v(\"#\")]),v._v(\" 控制器\")]),v._v(\" \"),s(\"p\",[v._v(\"程序技\")]),v._v(\" \"),s(\"h2\",{attrs:{id:\"运算器\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#运算器\"}},[v._v(\"#\")]),v._v(\" 运算器\")]),v._v(\" \"),s(\"p\",[v._v(\"运算器用来进行数据运算加工的。\")]),v._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:t(799),alt:\"image-20200827120358195\"}})]),v._v(\" \"),s(\"p\",[v._v(\"数据缓冲器\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"输入缓冲和输出缓冲\")]),v._v(\" \"),s(\"li\",[v._v(\"输入缓冲暂时存放外设送来的数据\")]),v._v(\" \"),s(\"li\",[v._v(\"输出缓冲暂时存放送往外设的数据\")])]),v._v(\" \"),s(\"p\",[v._v(\"ALU算数逻辑单元\")]),v._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:t(800),alt:\"image-20200827120618515\"}})]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"完成位运算：左右移、与或非\")]),v._v(\" \"),s(\"li\",[v._v(\"完成加减乘除\")])]),v._v(\" \"),s(\"p\",[v._v(\"状态字寄存器\")]),v._v(\" \"),s(\"p\",[v._v(\"存放运算状态(条件码、进位、溢出、结果正负等)\\n存放运算控制信息(调试跟踪标记位、允许中断位等)\")]),v._v(\" \"),s(\"p\",[v._v(\"通用寄存器\")]),v._v(\" \"),s(\"p\",[v._v(\"用于暂时存放或传送数据或指令\\n可保存ALU的运算中间结果\\n容量比一般专用寄存器要大\")]),v._v(\" \"),s(\"h2\",{attrs:{id:\"计算机指令执行过程\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#计算机指令执行过程\"}},[v._v(\"#\")]),v._v(\" 计算机指令执行过程\")]),v._v(\" \"),s(\"ul\",[s(\"li\",[v._v(\"取指令\")]),v._v(\" \"),s(\"li\",[v._v(\"分析指令\")]),v._v(\" \"),s(\"li\",[v._v(\"执行指令\")])])])}),[],!1,null,null,null);_.default=a.exports},780:function(v,_,t){v.exports=t.p+\"assets/img/image-20200826132410619.ccddfa8f.png\"},781:function(v,_,t){v.exports=t.p+\"assets/img/image-20200826151834966.5232513b.png\"},782:function(v,_,t){v.exports=t.p+\"assets/img/image-20200826152452545.3908b86b.png\"},783:function(v,_,t){v.exports=t.p+\"assets/img/image-20200826155729886.8c201657.png\"},784:function(v,_,t){v.exports=t.p+\"assets/img/image-20200826155928346.823354a0.png\"},785:function(v,_,t){v.exports=t.p+\"assets/img/image-20200826160925942.bb124f09.png\"},786:function(v,_,t){v.exports=t.p+\"assets/img/image-20200826161012805.349c45af.png\"},787:function(v,_,t){v.exports=t.p+\"assets/img/image-20200826165049436.347cf765.png\"},788:function(v,_,t){v.exports=t.p+\"assets/img/image-20200826173435067.a3be58bb.png\"},789:function(v,_,t){v.exports=t.p+\"assets/img/image-20200826181331046.5c0187a9.png\"},790:function(v,_,t){v.exports=t.p+\"assets/img/image-20200826182936094.ddfc419d.png\"},791:function(v,_,t){v.exports=t.p+\"assets/img/image-20200826183212254.ae73a7fc.png\"},792:function(v,_,t){v.exports=t.p+\"assets/img/image-20200826184418769.c447c78a.png\"},793:function(v,_,t){v.exports=t.p+\"assets/img/image-20200826183930777.339b163a.png\"},794:function(v,_,t){v.exports=t.p+\"assets/img/image-20200827114034890.eca4c7ae.png\"},795:function(v,_,t){v.exports=t.p+\"assets/img/image-20200827114121837.ef7d14e1.png\"},796:function(v,_,t){v.exports=t.p+\"assets/img/image-20200827114324175.e7bb8c6f.png\"},797:function(v,_,t){v.exports=t.p+\"assets/img/image-20200827115016796.bca4469d.png\"},798:function(v,_,t){v.exports=t.p+\"assets/img/image-20200827115910086.91a88b32.png\"},799:function(v,_,t){v.exports=t.p+\"assets/img/image-20200827120358195.50366856.png\"},800:function(v,_,t){v.exports=t.p+\"assets/img/image-20200827120618515.1a528874.png\"}}]);","extractedComments":[]}