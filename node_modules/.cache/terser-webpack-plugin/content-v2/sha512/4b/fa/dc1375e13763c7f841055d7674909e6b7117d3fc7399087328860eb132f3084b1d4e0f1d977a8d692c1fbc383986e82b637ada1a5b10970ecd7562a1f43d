{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[164],{954:function(n,a,e){\"use strict\";e.r(a);var t=e(43),s=Object(t.a)({},(function(){var n=this,a=n.$createElement,e=n._self._c||a;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":n.$parent.slotKey}},[e(\"h1\",{attrs:{id:\"node-js-repl-交互式解释器\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#node-js-repl-交互式解释器\"}},[n._v(\"#\")]),n._v(\" Node.js REPL(交互式解释器)\")]),n._v(\" \"),e(\"h2\",{attrs:{id:\"node-js-repl-交互式解释器-2\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#node-js-repl-交互式解释器-2\"}},[n._v(\"#\")]),n._v(\" Node.js REPL(交互式解释器)\")]),n._v(\" \"),e(\"p\",[n._v(\"Node.js REPL(Read Eval Print Loop:交互式解释器) 表示一个电脑的环境，类似 Window 系统的终端或 Unix/Linux shell，我们可以在终端中输入命令，并接收系统的响应。\")]),n._v(\" \"),e(\"p\",[n._v(\"REPL 的交互式的编程环境可以实时的验证你所编写的代码，非常适合于验证 Node.js 和 JavaScript 的相关 API。\")]),n._v(\" \"),e(\"p\",[n._v(\"Node 自带了交互式解释器，可以执行以下任务：\")]),n._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[n._v(\"读取\")]),n._v(\" - 读取用户输入，解析输入了Javascript 数据结构并存储在内存中。\")]),n._v(\" \"),e(\"li\",[e(\"strong\",[n._v(\"执行\")]),n._v(\" - 执行输入的数据结构\")]),n._v(\" \"),e(\"li\",[e(\"strong\",[n._v(\"打印\")]),n._v(\" - 输出结果\")]),n._v(\" \"),e(\"li\",[e(\"strong\",[n._v(\"循环\")]),n._v(\" - 循环操作以上步骤直到用户两次按下 \"),e(\"strong\",[n._v(\"ctrl-c\")]),n._v(\" 按钮退出。\")])]),n._v(\" \"),e(\"p\",[n._v(\"Node 的交互式解释器可以很好的调试 Javascript 代码。\")]),n._v(\" \"),e(\"p\",[n._v(\"开始学习 REPL\")]),n._v(\" \"),e(\"p\",[n._v(\"我们可以输入以下命令来启动 Node 的终端：\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"$ node\\n> \\n\")])])]),e(\"p\",[n._v(\"这时我们就可以在 > 后输入简单的表达式，并按下回车键来计算结果。\")]),n._v(\" \"),e(\"h3\",{attrs:{id:\"简单的表达式运算\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#简单的表达式运算\"}},[n._v(\"#\")]),n._v(\" 简单的表达式运算\")]),n._v(\" \"),e(\"p\",[n._v(\"接下来让我们在 Node.js REPL 的命令行窗口中执行简单的数学运算：\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"$ node\\n> 1 +4\\n5\\n> 5 / 2\\n2.5\\n> 3 * 6\\n18\\n> 4 - 1\\n3\\n> 1 + ( 2 * 3 ) - 4\\n3\\n>\\n\")])])]),e(\"h3\",{attrs:{id:\"使用变量\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用变量\"}},[n._v(\"#\")]),n._v(\" 使用变量\")]),n._v(\" \"),e(\"p\",[n._v(\"你可以将数据存储在变量中，并在你需要的使用它。\")]),n._v(\" \"),e(\"p\",[n._v(\"变量声明需要使用 \"),e(\"strong\",[n._v(\"var\")]),n._v(\" 关键字，如果没有使用 var 关键字变量会直接打印出来。\")]),n._v(\" \"),e(\"p\",[n._v(\"使用 \"),e(\"strong\",[n._v(\"var\")]),n._v(\" 关键字的变量可以使用 console.log() 来输出变量。\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('$ node\\n> x = 10\\n10\\n> var y = 10\\nundefined\\n> x + y\\n20\\n> console.log(\"Hello World\")\\nHello World\\nundefined\\n> console.log(\"www.w3cschool.cn\")\\nwww.w3cschool.cn\\nundefined\\n')])])]),e(\"h3\",{attrs:{id:\"多行表达式\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#多行表达式\"}},[n._v(\"#\")]),n._v(\" 多行表达式\")]),n._v(\" \"),e(\"p\",[n._v(\"Node REPL 支持输入多行表达式，这就有点类似 JavaScript。接下来让我们来执行一个 do-while 循环：\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('$ node\\n> var x = 0\\nundefined\\n> do {\\n... x++;\\n... console.log(\"x: \" + x);\\n... } while ( x < 5 );\\nx: 1\\nx: 2\\nx: 3\\nx: 4\\nx: 5\\nundefined\\n>\\n')])])]),e(\"p\",[e(\"strong\",[n._v(\"...\")]),n._v(\" 三个点的符号是系统自动生成的，你回车换行后即可。Node 会自动检测是否为连续的表达式。\")]),n._v(\" \"),e(\"h3\",{attrs:{id:\"下划线-变量\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#下划线-变量\"}},[n._v(\"#\")]),n._v(\" 下划线(_)变量\")]),n._v(\" \"),e(\"p\",[n._v(\"你可以使用下划线(_)获取表达式的运算结果：\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"$ node\\n> var x = 10\\nundefined\\n> var y = 20\\nundefined\\n> x + y\\n30\\n> var sum = _\\nundefined\\n> console.log(sum)\\n30\\nundefined\\n>\\n\")])])]),e(\"hr\"),n._v(\" \"),e(\"h2\",{attrs:{id:\"repl-命令\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#repl-命令\"}},[n._v(\"#\")]),n._v(\" REPL 命令\")]),n._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[n._v(\"ctrl + c\")]),n._v(\" - 退出当前终端。\")]),n._v(\" \"),e(\"li\",[e(\"strong\",[n._v(\"ctrl + c 按下两次\")]),n._v(\" - 退出 Node REPL。\")]),n._v(\" \"),e(\"li\",[e(\"strong\",[n._v(\"ctrl + d\")]),n._v(\" - 退出 Node REPL.\")]),n._v(\" \"),e(\"li\",[e(\"strong\",[n._v(\"向上/向下 键\")]),n._v(\" - 查看输入的历史命令\")]),n._v(\" \"),e(\"li\",[e(\"strong\",[n._v(\"tab 键\")]),n._v(\" - 列出当前命令\")]),n._v(\" \"),e(\"li\",[e(\"strong\",[n._v(\".help\")]),n._v(\" - 列出使用命令\")]),n._v(\" \"),e(\"li\",[e(\"strong\",[n._v(\".break\")]),n._v(\" - 退出多行表达式\")]),n._v(\" \"),e(\"li\",[e(\"strong\",[n._v(\".clear\")]),n._v(\" - 退出多行表达式\")]),n._v(\" \"),e(\"li\",[e(\"strong\",[n._v(\".save *filename*\")]),n._v(\" - 保存当前的 Node REPL 会话到指定文件\")]),n._v(\" \"),e(\"li\",[e(\"strong\",[n._v(\".load *filename*\")]),n._v(\" - 载入当前 Node REPL 会话的文件内容。\")])]),n._v(\" \"),e(\"hr\"),n._v(\" \"),e(\"h2\",{attrs:{id:\"停止-repl\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#停止-repl\"}},[n._v(\"#\")]),n._v(\" 停止 REPL\")]),n._v(\" \"),e(\"p\",[n._v(\"前面我们已经提到按下两次 \"),e(\"strong\",[n._v(\"ctrl + c\")]),n._v(\" 建就能退出 REPL:\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"$ node\\n>\\n(^C again to quit)\\n>\\n\")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);","extractedComments":[]}