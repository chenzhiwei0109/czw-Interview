{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{348:function(e,t,a){\"use strict\";a.r(t);var n=a(28),v=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"语法专题\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#语法专题\"}},[e._v(\"#\")]),e._v(\" 语法专题\")]),e._v(\" \"),a(\"h2\",{attrs:{id:\"数据类型的转换\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据类型的转换\"}},[e._v(\"#\")]),e._v(\" 数据类型的转换\")]),e._v(\" \"),a(\"p\",[e._v(\"JavaScript 是一种动态类型语言，变量没有类型限制，可以随时赋予任意值。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"var x = y ? 1 : 'a';\\n\")])])]),a(\"p\",[e._v(\"上面代码中，变量\"),a(\"code\",[e._v(\"x\")]),e._v(\"到底是数值还是字符串，取决于另一个变量\"),a(\"code\",[e._v(\"y\")]),e._v(\"的值。\"),a(\"code\",[e._v(\"y\")]),e._v(\"为\"),a(\"code\",[e._v(\"true\")]),e._v(\"时，\"),a(\"code\",[e._v(\"x\")]),e._v(\"是一个数值；\"),a(\"code\",[e._v(\"y\")]),e._v(\"为\"),a(\"code\",[e._v(\"false\")]),e._v(\"时，\"),a(\"code\",[e._v(\"x\")]),e._v(\"是一个字符串。这意味着，\"),a(\"code\",[e._v(\"x\")]),e._v(\"的类型没法在编译阶段就知道，必须等到运行时才能知道。\")]),e._v(\" \"),a(\"p\",[e._v(\"虽然变量的数据类型是不确定的，但是各种运算符对数据类型是有要求的。如果运算符发现，运算子的类型与预期不符，就会自动转换类型。比如，减法运算符预期左右两侧的运算子应该是数值，如果不是，就会自动将它们转为数值。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"'4' - '3' // 1\\n\")])])]),a(\"h2\",{attrs:{id:\"强制转换\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#强制转换\"}},[e._v(\"#\")]),e._v(\" 强制转换\")]),e._v(\" \"),a(\"p\",[e._v(\"强制转换主要指使用\"),a(\"code\",[e._v(\"Number()\")]),e._v(\"、\"),a(\"code\",[e._v(\"String()\")]),e._v(\"和\"),a(\"code\",[e._v(\"Boolean()\")]),e._v(\"三个函数，手动将各种类型的值，分别转换成数字、字符串或者布尔值。\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"number\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#number\"}},[e._v(\"#\")]),e._v(\" Number\")]),e._v(\" \"),a(\"p\",[e._v(\"使用\"),a(\"code\",[e._v(\"Number\")]),e._v(\"函数，可以将任意类型的值转化成数值。\")]),e._v(\" \"),a(\"p\",[e._v(\"下面分成两种情况讨论，一种是参数是原始类型的值，另一种是参数是对象。\")]),e._v(\" \"),a(\"p\",[a(\"strong\",[e._v(\"（1）原始类型值\")])]),e._v(\" \"),a(\"div\",{staticClass:\"language-js extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// 数值：转换后还是原来的值\")]),e._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"Number\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[e._v(\"324\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),e._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// 324\")]),e._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// 字符串：如果可以被解析为数值，则转换为相应的数值\")]),e._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"Number\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[e._v(\"'324'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),e._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// 324\")]),e._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// 字符串：如果不可以被解析为数值，返回 NaN\")]),e._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"Number\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[e._v(\"'324abc'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),e._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// NaN\")]),e._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// 空字符串转为0\")]),e._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"Number\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[e._v(\"''\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),e._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// 0\")]),e._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// 布尔值：true 转成 1，false 转成 0\")]),e._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"Number\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[e._v(\"true\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),e._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// 1\")]),e._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"Number\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[e._v(\"false\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),e._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// 0\")]),e._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// undefined：转成 NaN\")]),e._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"Number\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[e._v(\"undefined\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),e._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// NaN\")]),e._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// null：转成0\")]),e._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"Number\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[e._v(\"null\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),e._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[e._v(\"// 0\")]),e._v(\"\\n\")])])]),a(\"p\",[a(\"code\",[e._v(\"Number\")]),e._v(\"函数将字符串转为数值，要比\"),a(\"code\",[e._v(\"parseInt\")]),e._v(\"函数严格很多。基本上，只要有一个字符无法转成数值，整个字符串就会被转为\"),a(\"code\",[e._v(\"NaN\")]),e._v(\"。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"parseInt('42 cats') // 42\\nNumber('42 cats') // NaN\\n\")])])]),a(\"p\",[e._v(\"上面代码中，\"),a(\"code\",[e._v(\"parseInt\")]),e._v(\"逐个解析字符，而\"),a(\"code\",[e._v(\"Number\")]),e._v(\"函数整体转换字符串的类型。\")]),e._v(\" \"),a(\"p\",[e._v(\"另外，\"),a(\"code\",[e._v(\"parseInt\")]),e._v(\"和\"),a(\"code\",[e._v(\"Number\")]),e._v(\"函数都会自动过滤一个字符串前导和后缀的空格。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"parseInt('\\\\t\\\\v\\\\r12.34\\\\n') // 12\\nNumber('\\\\t\\\\v\\\\r12.34\\\\n') // 12.34\\n\")])])]),a(\"p\",[a(\"strong\",[e._v(\"（2）对象\")])]),e._v(\" \"),a(\"p\",[e._v(\"简单的规则是，\"),a(\"code\",[e._v(\"Number\")]),e._v(\"方法的参数是对象时，将返回\"),a(\"code\",[e._v(\"NaN\")]),e._v(\"，除非是包含单个数值的数组。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"Number({a: 1}) // NaN\\nNumber([1, 2, 3]) // NaN\\nNumber([5]) // 5\\n\")])])]),a(\"p\",[e._v(\"之所以会这样，是因为\"),a(\"code\",[e._v(\"Number\")]),e._v(\"背后的转换规则比较复杂。\")]),e._v(\" \"),a(\"p\",[e._v(\"第一步，调用对象自身的\"),a(\"code\",[e._v(\"valueOf\")]),e._v(\"方法。如果返回原始类型的值，则直接对该值使用\"),a(\"code\",[e._v(\"Number\")]),e._v(\"函数，不再进行后续步骤。\")]),e._v(\" \"),a(\"p\",[e._v(\"第二步，如果\"),a(\"code\",[e._v(\"valueOf\")]),e._v(\"方法返回的还是对象，则改为调用对象自身的\"),a(\"code\",[e._v(\"toString\")]),e._v(\"方法。如果\"),a(\"code\",[e._v(\"toString\")]),e._v(\"方法返回原始类型的值，则对该值使用\"),a(\"code\",[e._v(\"Number\")]),e._v(\"函数，不再进行后续步骤。\")]),e._v(\" \"),a(\"p\",[e._v(\"第三步，如果\"),a(\"code\",[e._v(\"toString\")]),e._v(\"方法返回的是对象，就报错。\")]),e._v(\" \"),a(\"p\",[e._v(\"请看下面的例子。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"var obj = {x: 1};\\nNumber(obj) // NaN\\n\\n// 等同于\\nif (typeof obj.valueOf() === 'object') {\\n  Number(obj.toString());\\n} else {\\n  Number(obj.valueOf());\\n}\\n\")])])]),a(\"p\",[e._v(\"上面代码中，\"),a(\"code\",[e._v(\"Number\")]),e._v(\"函数将\"),a(\"code\",[e._v(\"obj\")]),e._v(\"对象转为数值。背后发生了一连串的操作，首先调用\"),a(\"code\",[e._v(\"obj.valueOf\")]),e._v(\"方法, 结果返回对象本身；于是，继续调用\"),a(\"code\",[e._v(\"obj.toString\")]),e._v(\"方法，这时返回字符串\"),a(\"code\",[e._v(\"[object Object]\")]),e._v(\"，对这个字符串使用\"),a(\"code\",[e._v(\"Number\")]),e._v(\"函数，得到\"),a(\"code\",[e._v(\"NaN\")]),e._v(\"。\")]),e._v(\" \"),a(\"p\",[e._v(\"默认情况下，对象的\"),a(\"code\",[e._v(\"valueOf\")]),e._v(\"方法返回对象本身，所以一般总是会调用\"),a(\"code\",[e._v(\"toString\")]),e._v(\"方法，而\"),a(\"code\",[e._v(\"toString\")]),e._v(\"方法返回对象的类型字符串（比如\"),a(\"code\",[e._v(\"[object Object]\")]),e._v(\"）。所以，会有下面的结果。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"Number({}) // NaN\\n\")])])]),a(\"p\",[e._v(\"如果\"),a(\"code\",[e._v(\"toString\")]),e._v(\"方法返回的不是原始类型的值，结果就会报错。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"var obj = {\\n  valueOf: function () {\\n    return {};\\n  },\\n  toString: function () {\\n    return {};\\n  }\\n};\\n\\nNumber(obj)\\n// TypeError: Cannot convert object to primitive value\\n\")])])]),a(\"p\",[e._v(\"上面代码的\"),a(\"code\",[e._v(\"valueOf\")]),e._v(\"和\"),a(\"code\",[e._v(\"toString\")]),e._v(\"方法，返回的都是对象，所以转成数值时会报错。\")]),e._v(\" \"),a(\"p\",[e._v(\"从上例还可以看到，\"),a(\"code\",[e._v(\"valueOf\")]),e._v(\"和\"),a(\"code\",[e._v(\"toString\")]),e._v(\"方法，都是可以自定义的。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"Number({\\n  valueOf: function () {\\n    return 2;\\n  }\\n})\\n// 2\\n\\nNumber({\\n  toString: function () {\\n    return 3;\\n  }\\n})\\n// 3\\n\\nNumber({\\n  valueOf: function () {\\n    return 2;\\n  },\\n  toString: function () {\\n    return 3;\\n  }\\n})\\n// 2\\n\")])])]),a(\"p\",[e._v(\"上面代码对三个对象使用\"),a(\"code\",[e._v(\"Number\")]),e._v(\"函数。第一个对象返回\"),a(\"code\",[e._v(\"valueOf\")]),e._v(\"方法的值，第二个对象返回\"),a(\"code\",[e._v(\"toString\")]),e._v(\"方法的值，第三个对象表示\"),a(\"code\",[e._v(\"valueOf\")]),e._v(\"方法先于\"),a(\"code\",[e._v(\"toString\")]),e._v(\"方法执行。\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"string\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#string\"}},[e._v(\"#\")]),e._v(\" String\")]),e._v(\" \"),a(\"p\",[a(\"code\",[e._v(\"String\")]),e._v(\"函数可以将任意类型的值转化成字符串，转换规则如下。\")]),e._v(\" \"),a(\"p\",[a(\"strong\",[e._v(\"（1）原始类型值\")])]),e._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[e._v(\"数值\")]),e._v(\"：转为相应的字符串。\")]),e._v(\" \"),a(\"li\",[a(\"strong\",[e._v(\"字符串\")]),e._v(\"：转换后还是原来的值。\")]),e._v(\" \"),a(\"li\",[a(\"strong\",[e._v(\"布尔值\")]),e._v(\"：\"),a(\"code\",[e._v(\"true\")]),e._v(\"转为字符串\"),a(\"code\",[e._v('\"true\"')]),e._v(\"，\"),a(\"code\",[e._v(\"false\")]),e._v(\"转为字符串\"),a(\"code\",[e._v('\"false\"')]),e._v(\"。\")]),e._v(\" \"),a(\"li\",[a(\"strong\",[e._v(\"undefined\")]),e._v(\"：转为字符串\"),a(\"code\",[e._v('\"undefined\"')]),e._v(\"。\")]),e._v(\" \"),a(\"li\",[a(\"strong\",[e._v(\"null\")]),e._v(\"：转为字符串\"),a(\"code\",[e._v('\"null\"')]),e._v(\"。\")])]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v('String(123) // \"123\"\\nString(\\'abc\\') // \"abc\"\\nString(true) // \"true\"\\nString(undefined) // \"undefined\"\\nString(null) // \"null\"\\n')])])]),a(\"p\",[a(\"strong\",[e._v(\"（2）对象\")])]),e._v(\" \"),a(\"p\",[a(\"code\",[e._v(\"String\")]),e._v(\"方法的参数如果是对象，返回一个类型字符串；如果是数组，返回该数组的字符串形式。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v('String({a: 1}) // \"[object Object]\"\\nString([1, 2, 3]) // \"1,2,3\"\\n')])])]),a(\"p\",[a(\"code\",[e._v(\"String\")]),e._v(\"方法背后的转换规则，与\"),a(\"code\",[e._v(\"Number\")]),e._v(\"方法基本相同，只是互换了\"),a(\"code\",[e._v(\"valueOf\")]),e._v(\"方法和\"),a(\"code\",[e._v(\"toString\")]),e._v(\"方法的执行顺序。\")]),e._v(\" \"),a(\"ol\",[a(\"li\",[e._v(\"先调用对象自身的\"),a(\"code\",[e._v(\"toString\")]),e._v(\"方法。如果返回原始类型的值，则对该值使用\"),a(\"code\",[e._v(\"String\")]),e._v(\"函数，不再进行以下步骤。\")]),e._v(\" \"),a(\"li\",[e._v(\"如果\"),a(\"code\",[e._v(\"toString\")]),e._v(\"方法返回的是对象，再调用原对象的\"),a(\"code\",[e._v(\"valueOf\")]),e._v(\"方法。如果\"),a(\"code\",[e._v(\"valueOf\")]),e._v(\"方法返回原始类型的值，则对该值使用\"),a(\"code\",[e._v(\"String\")]),e._v(\"函数，不再进行以下步骤。\")]),e._v(\" \"),a(\"li\",[e._v(\"如果\"),a(\"code\",[e._v(\"valueOf\")]),e._v(\"方法返回的是对象，就报错。\")])]),e._v(\" \"),a(\"p\",[e._v(\"下面是一个例子。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v('String({a: 1})\\n// \"[object Object]\"\\n\\n// 等同于\\nString({a: 1}.toString())\\n// \"[object Object]\"\\n')])])]),a(\"p\",[e._v(\"上面代码先调用对象的\"),a(\"code\",[e._v(\"toString\")]),e._v(\"方法，发现返回的是字符串\"),a(\"code\",[e._v(\"[object Object]\")]),e._v(\"，就不再调用\"),a(\"code\",[e._v(\"valueOf\")]),e._v(\"方法了。\")]),e._v(\" \"),a(\"p\",[e._v(\"如果\"),a(\"code\",[e._v(\"toString\")]),e._v(\"法和\"),a(\"code\",[e._v(\"valueOf\")]),e._v(\"方法，返回的都是对象，就会报错。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"var obj = {\\n  valueOf: function () {\\n    return {};\\n  },\\n  toString: function () {\\n    return {};\\n  }\\n};\\n\\nString(obj)\\n// TypeError: Cannot convert object to primitive value\\n\")])])]),a(\"p\",[e._v(\"下面是通过自定义\"),a(\"code\",[e._v(\"toString\")]),e._v(\"方法，改变返回值的例子。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v('String({\\n  toString: function () {\\n    return 3;\\n  }\\n})\\n// \"3\"\\n\\nString({\\n  valueOf: function () {\\n    return 2;\\n  }\\n})\\n// \"[object Object]\"\\n\\nString({\\n  valueOf: function () {\\n    return 2;\\n  },\\n  toString: function () {\\n    return 3;\\n  }\\n})\\n// \"3\"\\n')])])]),a(\"p\",[e._v(\"上面代码对三个对象使用\"),a(\"code\",[e._v(\"String\")]),e._v(\"函数。第一个对象返回\"),a(\"code\",[e._v(\"toString\")]),e._v(\"方法的值（数值3），第二个对象返回的还是\"),a(\"code\",[e._v(\"toString\")]),e._v(\"方法的值（\"),a(\"code\",[e._v(\"[object Object]\")]),e._v(\"），第三个对象表示\"),a(\"code\",[e._v(\"toString\")]),e._v(\"方法先于\"),a(\"code\",[e._v(\"valueOf\")]),e._v(\"方法执行。\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"boolean\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#boolean\"}},[e._v(\"#\")]),e._v(\" Boolean\")]),e._v(\" \"),a(\"p\",[a(\"code\",[e._v(\"Boolean()\")]),e._v(\"函数可以将任意类型的值转为布尔值。\")]),e._v(\" \"),a(\"p\",[e._v(\"它的转换规则相对简单：除了以下五个值的转换结果为\"),a(\"code\",[e._v(\"false\")]),e._v(\"，其他的值全部为\"),a(\"code\",[e._v(\"true\")]),e._v(\"。\")]),e._v(\" \"),a(\"ul\",[a(\"li\",[a(\"code\",[e._v(\"undefined\")])]),e._v(\" \"),a(\"li\",[a(\"code\",[e._v(\"null\")])]),e._v(\" \"),a(\"li\",[a(\"code\",[e._v(\"0\")]),e._v(\"（包含\"),a(\"code\",[e._v(\"-0\")]),e._v(\"和\"),a(\"code\",[e._v(\"+0\")]),e._v(\"）\")]),e._v(\" \"),a(\"li\",[a(\"code\",[e._v(\"NaN\")])]),e._v(\" \"),a(\"li\",[a(\"code\",[e._v(\"''\")]),e._v(\"（空字符串）\")])]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"Boolean(undefined) // false\\nBoolean(null) // false\\nBoolean(0) // false\\nBoolean(NaN) // false\\nBoolean('') // false\\n\")])])]),a(\"p\",[e._v(\"当然，\"),a(\"code\",[e._v(\"true\")]),e._v(\"和\"),a(\"code\",[e._v(\"false\")]),e._v(\"这两个布尔值不会发生变化。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"Boolean(true) // true\\nBoolean(false) // false\\n\")])])]),a(\"p\",[e._v(\"注意，所有对象（包括空对象）的转换结果都是\"),a(\"code\",[e._v(\"true\")]),e._v(\"，甚至连\"),a(\"code\",[e._v(\"false\")]),e._v(\"对应的布尔对象\"),a(\"code\",[e._v(\"new Boolean(false)\")]),e._v(\"也是\"),a(\"code\",[e._v(\"true\")]),e._v(\"（详见《原始类型值的包装对象》一章）。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"Boolean({}) // true\\nBoolean([]) // true\\nBoolean(new Boolean(false)) // true\\n\")])])]),a(\"p\",[e._v(\"所有对象的布尔值都是\"),a(\"code\",[e._v(\"true\")]),e._v(\"，这是因为 JavaScript 语言设计的时候，出于性能的考虑，如果对象需要计算才能得到布尔值，对于\"),a(\"code\",[e._v(\"obj1 && obj2\")]),e._v(\"这样的场景，可能会需要较多的计算。为了保证性能，就统一规定，对象的布尔值为\"),a(\"code\",[e._v(\"true\")]),e._v(\"。\")]),e._v(\" \"),a(\"h2\",{attrs:{id:\"自动转换\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#自动转换\"}},[e._v(\"#\")]),e._v(\" 自动转换\")]),e._v(\" \"),a(\"p\",[e._v(\"遇到以下三种情况时，JavaScript 会自动转换数据类型，即转换是自动完成的，用户不可见。\")]),e._v(\" \"),a(\"p\",[e._v(\"第一种情况，不同类型的数据互相运算。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"123 + 'abc' // \\\"123abc\\\"\\n\")])])]),a(\"p\",[e._v(\"第二种情况，对非布尔值类型的数据求布尔值。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"if ('abc') {\\n  console.log('hello')\\n}  // \\\"hello\\\"\\n\")])])]),a(\"p\",[e._v(\"第三种情况，对非数值类型的值使用一元运算符（即\"),a(\"code\",[e._v(\"+\")]),e._v(\"和\"),a(\"code\",[e._v(\"-\")]),e._v(\"）。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"+ {foo: 'bar'} // NaN\\n- [1, 2, 3] // NaN\\n\")])])]),a(\"p\",[e._v(\"自动转换的规则是这样的：预期什么类型的值，就调用该类型的转换函数。比如，某个位置预期为字符串，就调用\"),a(\"code\",[e._v(\"String\")]),e._v(\"函数进行转换。如果该位置即可以是字符串，也可能是数值，那么默认转为数值。\")]),e._v(\" \"),a(\"p\",[e._v(\"由于自动转换具有不确定性，而且不易除错，建议在预期为布尔值、数值、字符串的地方，全部使用\"),a(\"code\",[e._v(\"Boolean\")]),e._v(\"、\"),a(\"code\",[e._v(\"Number\")]),e._v(\"和\"),a(\"code\",[e._v(\"String\")]),e._v(\"函数进行显式转换。\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"自动转换为布尔值\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#自动转换为布尔值\"}},[e._v(\"#\")]),e._v(\" 自动转换为布尔值\")]),e._v(\" \"),a(\"p\",[e._v(\"JavaScript 遇到预期为布尔值的地方（比如\"),a(\"code\",[e._v(\"if\")]),e._v(\"语句的条件部分），就会将非布尔值的参数自动转换为布尔值。系统内部会自动调用\"),a(\"code\",[e._v(\"Boolean\")]),e._v(\"函数。\")]),e._v(\" \"),a(\"p\",[e._v(\"因此除了以下五个值，其他都是自动转为\"),a(\"code\",[e._v(\"true\")]),e._v(\"。\")]),e._v(\" \"),a(\"ul\",[a(\"li\",[a(\"code\",[e._v(\"undefined\")])]),e._v(\" \"),a(\"li\",[a(\"code\",[e._v(\"null\")])]),e._v(\" \"),a(\"li\",[a(\"code\",[e._v(\"+0\")]),e._v(\"或\"),a(\"code\",[e._v(\"-0\")])]),e._v(\" \"),a(\"li\",[a(\"code\",[e._v(\"NaN\")])]),e._v(\" \"),a(\"li\",[a(\"code\",[e._v(\"''\")]),e._v(\"（空字符串）\")])]),e._v(\" \"),a(\"p\",[e._v(\"下面这个例子中，条件部分的每个值都相当于\"),a(\"code\",[e._v(\"false\")]),e._v(\"，使用否定运算符后，就变成了\"),a(\"code\",[e._v(\"true\")]),e._v(\"。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"if ( !undefined\\n  && !null\\n  && !0\\n  && !NaN\\n  && !''\\n) {\\n  console.log('true');\\n} // true\\n\")])])]),a(\"p\",[e._v(\"下面两种写法，有时也用于将一个表达式转为布尔值。它们内部调用的也是\"),a(\"code\",[e._v(\"Boolean\")]),e._v(\"函数。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"// 写法一\\nexpression ? true : false\\n\\n// 写法二\\n!! expression\\n\")])])]),a(\"h3\",{attrs:{id:\"自动转换为字符串\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#自动转换为字符串\"}},[e._v(\"#\")]),e._v(\" 自动转换为字符串\")]),e._v(\" \"),a(\"p\",[e._v(\"JavaScript 遇到预期为字符串的地方，就会将非字符串的值自动转为字符串。具体规则是，先将复合类型的值转为原始类型的值，再将原始类型的值转为字符串。\")]),e._v(\" \"),a(\"p\",[e._v(\"字符串的自动转换，主要发生在字符串的加法运算时。当一个值为字符串，另一个值为非字符串，则后者转为字符串。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"'5' + 1 // '51'\\n'5' + true // \\\"5true\\\"\\n'5' + false // \\\"5false\\\"\\n'5' + {} // \\\"5[object Object]\\\"\\n'5' + [] // \\\"5\\\"\\n'5' + function (){} // \\\"5function (){}\\\"\\n'5' + undefined // \\\"5undefined\\\"\\n'5' + null // \\\"5null\\\"\\n\")])])]),a(\"p\",[e._v(\"这种自动转换很容易出错。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"var obj = {\\n  width: '100'\\n};\\n\\nobj.width + 20 // \\\"10020\\\"\\n\")])])]),a(\"p\",[e._v(\"上面代码中，开发者可能期望返回\"),a(\"code\",[e._v(\"120\")]),e._v(\"，但是由于自动转换，实际上返回了一个字符\"),a(\"code\",[e._v(\"10020\")]),e._v(\"。\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"自动转换为数值\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#自动转换为数值\"}},[e._v(\"#\")]),e._v(\" 自动转换为数值\")]),e._v(\" \"),a(\"p\",[e._v(\"JavaScript 遇到预期为数值的地方，就会将参数值自动转换为数值。系统内部会自动调用\"),a(\"code\",[e._v(\"Number\")]),e._v(\"函数。\")]),e._v(\" \"),a(\"p\",[e._v(\"除了加法运算符（\"),a(\"code\",[e._v(\"+\")]),e._v(\"）有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"'5' - '2' // 3\\n'5' * '2' // 10\\ntrue - 1  // 0\\nfalse - 1 // -1\\n'1' - 1   // 0\\n'5' * []    // 0\\nfalse / '5' // 0\\n'abc' - 1   // NaN\\nnull + 1 // 1\\nundefined + 1 // NaN\\n\")])])]),a(\"p\",[e._v(\"上面代码中，运算符两侧的运算子，都被转成了数值。\")]),e._v(\" \"),a(\"blockquote\",[a(\"p\",[e._v(\"注意：\"),a(\"code\",[e._v(\"null\")]),e._v(\"转为数值时为\"),a(\"code\",[e._v(\"0\")]),e._v(\"，而\"),a(\"code\",[e._v(\"undefined\")]),e._v(\"转为数值时为\"),a(\"code\",[e._v(\"NaN\")]),e._v(\"。\")])]),e._v(\" \"),a(\"p\",[e._v(\"一元运算符也会把运算子转成数值。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"+'abc' // NaN\\n-'abc' // NaN\\n+true // 1\\n-false // 0\\n\")])])])])}),[],!1,null,null,null);t.default=v.exports}}]);","extractedComments":[]}