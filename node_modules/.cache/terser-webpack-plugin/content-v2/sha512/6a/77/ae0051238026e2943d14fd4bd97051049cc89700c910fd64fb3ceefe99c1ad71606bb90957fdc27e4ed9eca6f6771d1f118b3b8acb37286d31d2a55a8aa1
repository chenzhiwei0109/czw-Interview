{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[166],{955:function(e,n,t){\"use strict\";t.r(n);var a=t(43),o=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"node-的模块运行机制\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#node-的模块运行机制\"}},[e._v(\"#\")]),e._v(\" node 的模块运行机制\")]),e._v(\" \"),t(\"h2\",{attrs:{id:\"_1-commonjs-的规范\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-commonjs-的规范\"}},[e._v(\"#\")]),e._v(\" 1.CommonJS 的规范\")]),e._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/1/9/16f8afeec8db7d6d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\",alt:\"img\"}})]),e._v(\" \"),t(\"p\",[e._v(\"CommonJS 的规范，包括\"),t(\"strong\",[e._v(\"模块引用\")]),e._v(\"，**模块定义，模块标识，**3个部分\")]),e._v(\" \"),t(\"p\",[t(\"strong\",[e._v(\"模块引用:\")]),e._v(\" 模块通过require方法来\"),t(\"strong\",[e._v(\"同步加载\")]),e._v(\"所依赖的模块\")]),e._v(\" \"),t(\"p\",[t(\"strong\",[e._v(\"模块定义:\")]),e._v(\" 在node中一个文件就是一个模块，提供exports对象导出当前模块的方法或变量\")]),e._v(\" \"),t(\"p\",[t(\"strong\",[e._v(\"模块标识:\")]),e._v(\" 模块标识传递给require()方法的参数，可以是按小驼峰（camelCase）命名的字符串，也可以是文件路径。\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"_1-1-node-模块中commonjs-的应用\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-1-node-模块中commonjs-的应用\"}},[e._v(\"#\")]),e._v(\" 1.1.node 模块中CommonJS 的应用\")]),e._v(\" \"),t(\"p\",[t(\"strong\",[e._v(\"模块内容导出\")]),e._v(\"两种方式：\")]),e._v(\" \"),t(\"p\",[e._v(\"a.js的内容如下，\")]),e._v(\" \"),t(\"p\",[e._v(\"**方式一：**可将需要导出的变量或函数挂载到 exports 对象的属性上\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"// node.js 每一个文件都是一个单独模块\\n// Node对获取的Javascript文件的内容进行了包装，以传入如下变量\\nconsole.log(exports, require, module, __filename, __dirname);\\n// 可将需要导出的变量或函数挂载到 exports 对象的属性上，\\nexports.name = 'luoxiaobu';\\nexports.age = '18'复制代码\\n\")])])]),t(\"p\",[e._v(\"**方式二：**使用 module.exports 对象整体导出一个变量对象或者函数\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"// node.js 每一个文件都是一个单独模块\\n// Node对获取的Javascript文件的内容进行了包装，以传入如下变量\\nconsole.log(exports, require, module, __filename, __dirname);\\nlet name = 'luoxiaobu';\\nlet age = '18'\\n// 使用 module.exports 对象整体导出一个变量对象或者函数，\\nmodule.exports = {name,age};复制代码\\n\")])])]),t(\"p\",[t(\"strong\",[e._v(\"模块的引用\")]),e._v(\"的方式： 按照引用模块的来源来区分\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"// 核心模块的引入 node自己的模块\\nlet crypto = require('crypto')\\n\\n// 用户自己编写的模块引入\\nlet aModule = require('./a.js')\\n// 第三方，别人实现发布的模块（其实也是其他用户编写）\\nlet proxy = require('http-proxy');复制代码\\n\")])])]),t(\"h2\",{attrs:{id:\"_2-node-模块加载过程\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-node-模块加载过程\"}},[e._v(\"#\")]),e._v(\" 2.node 模块加载过程\")]),e._v(\" \"),t(\"p\",[e._v(\"node.js 每一个文件都是一个单独模块，每个模块都用一个module对象来表示自身。\")]),e._v(\" \"),t(\"p\",[t(\"strong\",[e._v(\"非 node NativeModule\")])]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"// 非 node NativeModule\\nfunction Module(id = '', parent) {\\n  this.id = id;\\n  this.path = path.dirname(id);\\n  this.exports = {};\\n  this.parent = parent;\\n  updateChildren(parent, this, false);\\n  this.filename = null;\\n  this.loaded = false;\\n  this.children = [];\\n}复制代码\\n\")])])]),t(\"p\",[t(\"strong\",[e._v(\"NativeModule\")])]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"// Set up NativeModule.\\nfunction NativeModule(id) {\\n  this.filename = `${id}.js`;\\n  this.id = id;\\n  this.exports = {};\\n  this.module = undefined;\\n  this.exportKeys = undefined;\\n  this.loaded = false;\\n  this.loading = false;\\n  this.canBeRequiredByUsers = !id.startsWith('internal/');\\n}复制代码\\n\")])])]),t(\"h3\",{attrs:{id:\"_2-1-node-模块加载简述\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1-node-模块加载简述\"}},[e._v(\"#\")]),e._v(\" 2.1 node 模块加载简述\")]),e._v(\" \"),t(\"p\",[e._v(\"加载过程大概流程：(Module._load 加载函数)\")]),e._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/1/9/16f8afeeca24864d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\",alt:\"img\"}})]),e._v(\" \"),t(\"p\",[e._v(\"参考源码：\"),t(\"a\",{attrs:{href:\"https://github.com/nodejs/node/blob/b04de23afa6da18d7b81b70c1a4bb53476f125c7/lib/internal/modules/cjs/loader.js\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"node/lib/internal/modules/cjs/loader.js\"),t(\"OutboundLink\")],1)]),e._v(\" \"),t(\"p\",[e._v(\"代码略微删减\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"// Check the cache for the requested file.\\n// 1. If a module already exists in the cache: return its exports object.\\n// 2. If the module is native: call\\n//    `NativeModule.prototype.compileForPublicLoader()` and return the exports.\\n// 3. Otherwise, create a new module for the file and save it to the cache.\\n//    Then have it load  the file contents before returning its exports\\n//    object.\\nModule._load = function(request, parent, isMain) {\\n    let relResolveCacheIdentifier;\\n    if (parent) {\\n      debug('Module._load REQUEST %s parent: %s', request, parent.id);\\n      ...\\n    }\\n    // 查找文件具体位置\\n    const filename = Module._resolveFilename(request, parent, isMain);\\n    // 存在缓存，则不需要再次执行 返回缓存\\n    const cachedModule = Module._cache[filename];\\n    if (cachedModule !== undefined) {\\n      updateChildren(parent, cachedModule, true);\\n      if (!cachedModule.loaded)\\n        return getExportsForCircularRequire(cachedModule);\\n      return cachedModule.exports;\\n    }\\n    // 加载node原生模块，原生模块loadNativeModule  \\n    // 如果有 且能被用户引用 返回 mod.exports（这包括node模块的编译创建module对象，将模块运行结果保存在module对象上）\\n    const mod = loadNativeModule(filename, request);\\n    if (mod && mod.canBeRequiredByUsers) return mod.exports;\\n  \\n    // 创建一个模块\\n    // Don't call updateChildren(), Module constructor already does.\\n    const module = new Module(filename, parent);\\n  \\n    if (isMain) {\\n      process.mainModule = module;\\n      module.id = '.';\\n    }\\n    // 缓存模块\\n    Module._cache[filename] = module;\\n    if (parent !== undefined) {\\n      relativeResolveCache[relResolveCacheIdentifier] = filename;\\n    }\\n    // 加载执行新的模块\\n    module.load(filename);  \\n      \\n    return module.exports;\\n  };复制代码\\n\")])])]),t(\"p\",[t(\"strong\",[e._v(\"node 缓存的是编译和执行后的对象\")])]),e._v(\" \"),t(\"p\",[t(\"strong\",[e._v(\"相同：\")])]),e._v(\" \"),t(\"p\",[e._v(\"node模块和非node模块经历的过程都是，有执行后的缓存对象，返回缓存对象\")]),e._v(\" \"),t(\"p\",[e._v(\"没有执行后的缓存对象，创建module对象，执行模块，存储执行后得到的对象，返回执行后的结果exports\")]),e._v(\" \"),t(\"p\",[t(\"strong\",[e._v(\"不同：\")])]),e._v(\" \"),t(\"p\",[e._v(\"缓存对象不同\")]),e._v(\" \"),t(\"p\",[e._v(\"加载模块文件方式不同\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"_2-2-node-源码目录\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-2-node-源码目录\"}},[e._v(\"#\")]),e._v(\" 2.2 node 源码目录\")]),e._v(\" \"),t(\"p\",[t(\"a\",{attrs:{href:\"https://github.com/nodejs/node\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"大概源码结构\"),t(\"OutboundLink\")],1),e._v(\"：(只标注了部分感兴趣的)\")]),e._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/1/9/16f8afeecb31d4b1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\",alt:\"img\"}})]),e._v(\" \"),t(\"p\",[e._v(\"我们可以看到 node 库的目录，其中：\")]),e._v(\" \"),t(\"p\",[e._v(\"**deps：**包含了node所依赖的库，如v8，libuv，zlib 等，\")]),e._v(\" \"),t(\"p\",[e._v(\"**lib：**包含了用 javascript 定义的函数和模块(可能会通过internalBinding调用c++模块，c++ 模块实现在目录src 下)，\")]),e._v(\" \"),t(\"p\",[e._v(\"**src：**包括了lib 库对应的C++实现，其中很多 built-in(C++实现) 模块都在这里\")]),e._v(\" \"),t(\"p\",[t(\"strong\",[e._v(\"会有所困惑，js跟c++ 之间的相互调用？\")])]),e._v(\" \"),t(\"p\",[e._v(\"Node.js主要包括这几个部分，Node Standard Library，Node Bindings，V8，Libuv，架构图如下:\")]),e._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/1/9/16f8afeecbde764f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\",alt:\"img\"}})]),e._v(\" \"),t(\"p\",[e._v(\"Node Bindings: 是沟通JS 和 C++的桥梁，将V8 引擎暴露的c++ 接口转换成JS API\")]),e._v(\" \"),t(\"p\",[e._v(\"V8: JavaScript的引擎，提供JavaScript运行环境\")]),e._v(\" \"),t(\"p\",[e._v(\"c++ 模块的引用大概流程\")]),e._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/1/9/16f8afeed355bca3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\",alt:\"img\"}})]),e._v(\" \"),t(\"p\",[e._v(\"C++ 和 JS 交互 参考文章：(感兴趣可以了解一下)\")]),e._v(\" \"),t(\"p\",[t(\"a\",{attrs:{href:\"https://yjhjstz.gitbooks.io/deep-into-node/content/chapter2/chapter2-1.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"C++ 和 JS 交互\"),t(\"OutboundLink\")],1)]),e._v(\" \"),t(\"p\",[t(\"a\",{attrs:{href:\"https://www.ibm.com/developerworks/cn/opensource/os-cn-v8engine/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"使用 Google V8 引擎开发可定制的应用程序\"),t(\"OutboundLink\")],1)]),e._v(\" \"),t(\"h3\",{attrs:{id:\"_2-3-node-模块分类\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-3-node-模块分类\"}},[e._v(\"#\")]),e._v(\" 2.3 node 模块分类\")]),e._v(\" \"),t(\"p\",[e._v(\"参考：\"),t(\"a\",{attrs:{href:\"https://github.com/nodejs/node/blob/master/lib/internal/bootstrap/loaders.js\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"node/lib/internal/bootstrap/loaders.js\"),t(\"OutboundLink\")],1)]),e._v(\" \"),t(\"blockquote\",[t(\"p\",[e._v(\"// This file creates the internal module & binding loaders used by built-in\")]),e._v(\" \"),t(\"p\",[e._v(\"// modules. In contrast, user land modules are loaded using\")]),e._v(\" \"),t(\"p\",[e._v(\"// lib/internal/modules/cjs/loader.js (CommonJS Modules) or\")]),e._v(\" \"),t(\"p\",[e._v(\"// lib/internal/modules/esm/* (ES Modules).\")]),e._v(\" \"),t(\"p\",[e._v(\"//\")]),e._v(\" \"),t(\"p\",[e._v(\"// This file is compiled and run by node.cc before bootstrap/node.js\")]),e._v(\" \"),t(\"p\",[e._v(\"// was called, therefore the loaders are bootstraped before we start to\")]),e._v(\" \"),t(\"p\",[e._v(\"// actually bootstrap Node.js. It creates the following objects:\")])]),e._v(\" \"),t(\"p\",[t(\"strong\",[e._v(\"node.cc编译和运行的node/lib/internal/bootstrap/loaders.js 文件的时候会，创建内部模块， 绑定内置模块使用的加载程序。\")])]),e._v(\" \"),t(\"p\",[t(\"strong\",[e._v(\"而用户的模块加载运行依靠lib/internal/modules/cjs/loader.js 或者 lib/internal/modules/esm/*\")])]),e._v(\" \"),t(\"p\",[e._v(\"所以node的模块大致分为两类：\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"node的核心模块\\n\"),t(\"ul\",[t(\"li\",[e._v(\"node的核心模块js实现\")]),e._v(\" \"),t(\"li\",[e._v(\"node核心模块c++实现，js包裹调用c++模块\")])])]),e._v(\" \"),t(\"li\",[e._v(\"第三方模块，或者用户自己编写模块\\n\"),t(\"ul\",[t(\"li\",[e._v(\"JavaScript 模块，我们开发写的JavaScript 模\")]),e._v(\" \"),t(\"li\",[e._v(\"JSON 模块，一个 JSON 文件\")]),e._v(\" \"),t(\"li\",[e._v(\"C/C++ 扩展模块，使用 C/C++ 编写，编译后后缀名为 .node（感兴趣可以了解动态链接库）\")])])])]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_2-3-1-node的核心模块\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-3-1-node的核心模块\"}},[e._v(\"#\")]),e._v(\" 2.3.1 node的核心模块\")]),e._v(\" \"),t(\"p\",[t(\"strong\",[e._v(\"⑴ C++ binding loaders:****(对c++核心模块的引入，暴露的c++ 接口)\")])]),e._v(\" \"),t(\"p\",[e._v(\"**process.binding（）：**旧版C ++绑定加载程序，可从用户空间访问，因为它是附加到全局流程对象的对象。这些C ++绑定是使用NODE_BUILTIN_MODULE_CONTEXT_AWARE（）创建的，并且其nm_flags设置为NM_F_BUILTIN。我们无法确保这些绑定的稳定性，但是仍然必须时时解决由它们引起的兼容性问题。\")]),e._v(\" \"),t(\"p\",[e._v(\"**process._linkedBinding（）：**在应用程序中添加额外的其他C ++绑定。可以使用带有标志NM_F_LINKED 的 NODE_MODULE_CONTEXT_AWARE_CPP（）创建这些C ++绑定。\")]),e._v(\" \"),t(\"p\",[e._v(\"**internalBinding（）：**私有内部C ++绑定加载程序，（除非通过\"),t(\"code\",[e._v(\"require（'internal / test / binding'）\")]),e._v(\"，否则无法从用户区域访问）。 这些C ++绑定是使用NODE_MODULE_CONTEXT_AWARE_INTERNAL（）创建的，其nm_flags设置为NM_F_INTERNAL。\")]),e._v(\" \"),t(\"p\",[t(\"strong\",[e._v(\"⑵Internal JavaScript module loader:\")])]),e._v(\" \"),t(\"p\",[e._v(\"该模块是用于加载 lib/\"),t(\"strong\",[e._v(\"/*.js 和 deps/\")]),e._v(\"/*.js 中的JavaScript核心模块的最小模块系统。\")]),e._v(\" \"),t(\"p\",[e._v(\"所有核心模块都通过由 js2c.py 生成的 node_javascript.cc 编译成 Node 二进制文件，这样可以更快地加载它们，而不需要I/O成本。\")]),e._v(\" \"),t(\"p\",[e._v(\"此类使lib / internal / *，deps / internal / *模块和internalBinding（）在默认情况下对核心模块可，并允许核心模块通require（'internal / bootstrap / loaders'）来引用自身，即使此文件不是以CommonJS风格编写的。\")]),e._v(\" \"),t(\"p\",[e._v(\"核心模块的加载大概如下：（internalBinding是process.binding的替代可以简单这样理解）\")]),e._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/1/9/16f8afeed54820e7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\",alt:\"img\"}})]),e._v(\" \"),t(\"p\",[e._v(\"Process.binding / InternalBinding 实际上是C++函数，是用于将Node标准库中C++端和Javascript端连接起来的桥梁。\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"_2-3-2-node的非-核心模块\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-3-2-node的非-核心模块\"}},[e._v(\"#\")]),e._v(\" 2.3.2 node的非 核心模块\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"JavaScript 模块，我们开发写的JavaScript 模(或着第三方模块)\")]),e._v(\" \"),t(\"li\",[e._v(\"JSON 模块，一个 JSON 文件\")]),e._v(\" \"),t(\"li\",[e._v(\"C/C++ 扩展模块，使用 C/C++ 编写，编译后后缀名为 .node（感兴趣可以了解动态链接库）\")])]),e._v(\" \"),t(\"p\",[e._v(\"此类模块的大概加载流程：\")]),e._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/1/10/16f8d30d540b48d8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\",alt:\"img\"}})]),e._v(\" \"),t(\"p\",[e._v(\"路径分析\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"const filename = Module._resolveFilename(request, parent, isMain);复制代码\\n\")])])]),t(\"p\",[e._v(\"是否有缓存\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\" const cachedModule = Module._cache[filename];\\n  if (cachedModule !== undefined) {\\n    updateChildren(parent, cachedModule, true);\\n    return cachedModule.exports;\\n  }复制代码\\n\")])])]),t(\"p\",[e._v(\"创建module对象\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"  const module = new Module(filename, parent);\\n// 缓存 module 对象\\n  Module._cache[filename] = module;复制代码\\n\")])])]),t(\"p\",[e._v(\"文件定位根据后缀编译执行\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"// Native extension for .js\\nModule._extensions['.js'] = function(module, filename) {\\n  if (experimentalModules && filename.endsWith('.js')) {\\n    const pkg = readPackageScope(filename);\\n    if (pkg && pkg.type === 'module') {\\n      throw new ERR_REQUIRE_ESM(filename);\\n    }\\n  }\\n  const content = fs.readFileSync(filename, 'utf8');\\n  module._compile(stripBOM(content), filename);\\n};\\n\\n\\n// Native extension for .json\\nModule._extensions['.json'] = function(module, filename) {\\n  const content = fs.readFileSync(filename, 'utf8');\\n\\n  if (manifest) {\\n    const moduleURL = pathToFileURL(filename);\\n    manifest.assertIntegrity(moduleURL, content);\\n  }\\n\\n  try {\\n    module.exports = JSON.parse(stripBOM(content));\\n  } catch (err) {\\n    err.message = filename + ': ' + err.message;\\n    throw err;\\n  }\\n};\\n\\n\\n// Native extension for .node\\nModule._extensions['.node'] = function(module, filename) {\\n  if (manifest) {\\n    const content = fs.readFileSync(filename);\\n    const moduleURL = pathToFileURL(filename);\\n    manifest.assertIntegrity(moduleURL, content);\\n  }\\n  // Be aware this doesn't use `content`\\n  return process.dlopen(module, path.toNamespacedPath(filename));\\n};复制代码\\n\")])])]),t(\"p\",[e._v(\"返回module.exports 对象。\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"二进制模块\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二进制模块\"}},[e._v(\"#\")]),e._v(\" 二进制模块\")]),e._v(\" \"),t(\"p\",[e._v(\"虽然一般我们使用 JS 编写模块，但 NodeJS 也支持使用 C/C++ 编写二进制模块。编译好的二进制模块除了文件扩展名是\"),t(\"code\",[e._v(\".node\")]),e._v(\"外，和 JS 模块的使用方式相同。虽然二进制模块能使用操作系统提供的所有功能，拥有无限的潜能，但对于前端同学而言编写过于困难，并且难以跨平台使用，因此不在本教程的覆盖范围内。\")]),e._v(\" \"),t(\"h2\",{attrs:{id:\"_3-总结\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-总结\"}},[e._v(\"#\")]),e._v(\" 3.总结\")]),e._v(\" \"),t(\"p\",[e._v(\"node 的模块运行机制简单了解。 涉及大概流程，略过的底层系统区别。\")])])}),[],!1,null,null,null);n.default=o.exports}}]);","extractedComments":[]}